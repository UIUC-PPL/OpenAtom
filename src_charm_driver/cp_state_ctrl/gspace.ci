/** \file CP_State_GSpacePlane.C
  @addtogroup GSpaceState
  @{
 */

#ifdef _CP_DEBUG_PSI_OFF_
#define _SDAG_DEBUG_PSI_OFF_ true
#else
#define _SDAG_DEBUG_PSI_OFF_ false
#endif

#ifdef _CP_DEBUG_SFNL_OFF_
#define _SDAG_DEBUG_SFNL_OFF_ true
#else
#define _SDAG_DEBUG_SFNL_OFF_ false
#endif

#ifdef _CP_DEBUG_VKS_OFF_
#define _SDAG_DEBUG_VKS_OFF_ true
#else
#define _SDAG_DEBUG_VKS_OFF_ false
#endif

#ifdef _CP_DEBUG_ORTHO_OFF_
#define _SDAG_DEBUG_ORTHO_OFF_ true
#else
#define _SDAG_DEBUG_ORTHO_OFF_ false
#endif

module gSpaceDriver
{
  include "uber/Uber.h";
  array [2D] GSpaceDriver
  {
    // Constructor(s)
    entry GSpaceDriver(const UberCollection _thisInstance);

    // Start and stop the flow control using SDAG
    entry void startControl();

    // Requests to trigger things
    entry void needUpdatedPsiV();
    entry void startNonLocalEes(int iteration_loc);

    // Incoming notifications of task completion
    entry void doneComputingEnergy(const int AtomGrpIter);
    entry void doneMovingAtoms(const int AtomGrpIter);
    entry void donePsiFandVKS();
    entry void doneLambdaAndCg();
    entry void doneRedPsi();
    entry void doneNewPsi();
    entry void donePsiV();
    entry void doneOutput();
    entry void doneNLForces();
    entry void startNextStep();

    entry void minimizationDone(bool);
    entry void dynamicsDone(bool);
    entry void bomdDone(bool);

    // Incoming reduction barrier notifications
    entry [nokeep] void allDoneNLForces(CkReductionMsg *msg) {
      serial "SDAG_doneNLForces" { doneNLForces(); }
    };

    entry void driveGSpace() {
      // Decide which type of computation you are doing and initiate the
      // appropriate control flow.
      // TODO: Need to update flags to be able to decide between more than just
      // minimization and dynamics.
      if (cp_min_opt && !cp_bomd_opt) {
        serial "SDAG_computeMinimization" { computeMinimization(); }
        when minimizationDone(bool success) {}
      } else if (cp_bomd_opt) {
        serial "SDAG_computeBOMD" { computeBOMD(); }
        when bomdDone(bool success) {}
      } else {
        serial "SDAG_computeDynamics" { computeDynamics(); }
        when dynamicsDone(bool success) {}
      }
      serial "SDAG_finishComputation" { finishComputation(); }
    };

    //! \brief SDAG method for flow control while doing minimization
    entry void computeMinimization() {
      serial "SDAG_minInitialSetup" {
        if (thisIndex.x == 0 && thisIndex.y == 0) {
	  CkPrintf("\n********************************************************************************\n");
          CkPrintf("* Starting minimization with a max of %d steps\n", config.maxIter);
	  CkPrintf("********************************************************************************\n");
        }
        myGSpaceObj->min_step = 0;
        myGSpaceObj->exitFlag = 0;
      }
      // Compute our initial psi unless gen_wave is on
      if (!_SDAG_DEBUG_PSI_OFF_ && gen_wave) {
        serial "SDAG_minInitComputeNewPsi" { myGSpaceObj->computeNewPsi(); }
        when doneNewPsi() {}
      }

      serial {
        myGSpaceObj->wallTimeArr[0] = CkWallTimer(); 
      }
      //! Loop until we hit the last iteration, or the GSpacePlane has signaled
      //! that we have met the desired tolerance by setting exitFlag to 1.
      while(myGSpaceObj->min_step < config.maxIter && !myGSpaceObj->exitFlag) {
        serial "SDAG_minStartIteration" {
          //! Resets flags and increases the iteration counter
          myGSpaceObj->min_step++;
          myGSpaceObj->thisProxy(thisIndex.x,thisIndex.y).startNewIter();
        }

        if (!_SDAG_DEBUG_PSI_OFF_) {
          //! If called, releaseSFComputeZ() triggers an NL force computation.
          if (!_SDAG_DEBUG_SFNL_OFF_ && ees_nonlocal==0 && natm_nl!=0)
          serial "SDAG_minReleaseSFComputeZ" {
            releaseSFComputeZ();
          }

          //! Both branches of this if will trigger an NL force computation if
          //! releaseSFComputeZ() was not called above.
          if (!_SDAG_DEBUG_VKS_OFF_) serial "SDAG_minComputePsiFandVKS" {
            myGSpaceObj->computePsiFandVKS();
          } else if (!_SDAG_DEBUG_SFNL_OFF_ && ees_nonlocal && natm_nl)
            serial "SDAG_minStartNonLocalEes" {
            startNonLocalEes(myGSpaceObj->iteration);
          }

          //! Wait for both the VKS and the NL force computations to complete.
          overlap {
            if (!_SDAG_DEBUG_SFNL_OFF_ && natm_nl!=0) {
              when doneNLForces() {}
            }
            if (!_SDAG_DEBUG_VKS_OFF_) {
              when donePsiFandVKS() {}
            }
          }

          serial "SDAG_minCombineForcesGetEke" {
            myGSpaceObj->combineForcesGetEke();
          }
        }  // end if !_SDAG_DEBUG_PSI_OFF_

        if (!_SDAG_DEBUG_PSI_OFF_) {
          serial "SDAG_minComputeLambdaAndCg" {
            myGSpaceObj->computeLambdaAndCg();
          }
          when doneLambdaAndCg() serial "SDAG_minLaunchAtoms" {
            myGSpaceObj->launchAtoms();
          }

          serial "SDAG_minComputeRedPsi" { myGSpaceObj->computeRedPsi(); }
          when doneRedPsi() {}
        }  // end if !_SDAG_DEBUG_PSI_OFF_

        //! Compute our next Psi, update PsiV, and dump output.
        if (!_SDAG_DEBUG_PSI_OFF_) {
          serial "SDAG_minComputeNewPsi" { myGSpaceObj->computeNewPsi(); }
          when doneNewPsi() {}

          //! Dump to file every ndump_frq iterations and the final iteration.
          if (config.stateOutput==1 &&
              (myGSpaceObj->iteration % ndump_frq==0 ||
               myGSpaceObj->iteration==config.maxIter ||
               myGSpaceObj->exitFlag==1)) {
            serial "SDAG_minDoOutput" { myGSpaceObj->doOutput(); }
            when doneOutput() {}
          }
        }  // end if !_SDAG_DEBUG_PSI_OFF_

        //! Wait for both the energy computation, and the atoms to be moved
        //! before going to the next iteration.
        overlap {
          if (!_SDAG_DEBUG_PSI_OFF_) {
            when doneComputingEnergy(const int AtomGrpIter) {}
          }
          when doneMovingAtoms(const int AtomsGrpIter) {}
        }

        serial {
          contribute(CkCallback(CkIndex_InstanceController::doneIteration(), 
                CkArrayIndex1D(thisInstance.proxyOffset),instControllerProxy));
        }

        when startNextStep() {}

        //! Print out the iteration times.
        serial "SDAG_minScreenPrintWallTimes" {
          myGSpaceObj->screenPrintWallTimes();
        }
      }  // end while simulation is running

      serial "SDAG_minimizationDone" {
        thisProxy[thisIndex].minimizationDone(myGSpaceObj->exitFlag);
      }
    };

    //! \brief SDAG method for flow control while doing dynamics
    entry void computeDynamics() {
      serial "SDAG_dynInitialSetup" {
        if (thisIndex.x == 0 && thisIndex.y == 0) {
	  CPcharmParaInfo *sim  = CPcharmParaInfo::get(); 
	  CkPrintf("\n********************************************************************************\n");
	  if(sim->cp_dyn_update==0)
	    CkPrintf("* Starting dynamics for %d steps with Reset Frequency %d\n", myGSpaceObj->num_steps, sim->cp_dyn_reset_frq);	
	  else
	    CkPrintf("* Starting dynamics for %d steps\n", myGSpaceObj->num_steps);
	  CkPrintf("********************************************************************************\n\n");
        }
      }
      //! Compute our initial psi
      if (!_SDAG_DEBUG_PSI_OFF_) {
        serial "SDAG_dynInitComputeNewPsi" { myGSpaceObj->computeNewPsi(); }
        when doneNewPsi() {}
      }  // end if !_SDAG_DEBUG_PSI_OFF_

      serial {
        myGSpaceObj->wallTimeArr[0] = CkWallTimer(); 
      }
      //! Loop until we hit the last iteration, or the GSpacePlane has signaled
      //! to exit because we have exceeded the allowed tolerance.
      while(myGSpaceObj->iteration < myGSpaceObj->num_steps && !myGSpaceObj->exitFlag) {
        serial "SDAG_dynStartIteration" {
          //! Resets flags and increases the iteration counter.
          myGSpaceObj->thisProxy(thisIndex.x,thisIndex.y).startNewIter();
        }

        if (!_SDAG_DEBUG_PSI_OFF_) {
          //! If called, releaseSFComputeZ() triggers an NL force computation.
          if (!_SDAG_DEBUG_SFNL_OFF_ && ees_nonlocal == 0 && natm_nl)
          serial "SDAG_dynReleaseSFComputeZ" {
            releaseSFComputeZ();
          }

          //! Both branches of this if will trigger an NL force computation if
          //! releaseSFComputeZ() was not called above.
          if (!_SDAG_DEBUG_VKS_OFF_) serial "SDAG_dynComputePsiFandVKS" {
            myGSpaceObj->computePsiFandVKS();
          } else if (!_SDAG_DEBUG_SFNL_OFF_ && ees_nonlocal && natm_nl)
            serial "SDAG_dynStartNonLocalEes" {
            startNonLocalEes(myGSpaceObj->iteration);
          }

          //! Wait for both the VKS and the NL force computations to complete.
          overlap {
            if (!_SDAG_DEBUG_SFNL_OFF_ && natm_nl!=0)  {
              when doneNLForces() {}
            }
            if (!_SDAG_DEBUG_VKS_OFF_) {
              when donePsiFandVKS() {}
            }
          }

          serial "SDAG_dynCombineForcesGetEke" {
            myGSpaceObj->combineForcesGetEke();
          }
        }  // end if !_SDAG_DEBUG_PSI_OFF_

        serial "SDAG_dynLaunchAtoms" { myGSpaceObj->launchAtoms(); }

        if (!_SDAG_DEBUG_PSI_OFF_) {
          serial "SDAG_dynComputeLambdaAndCg" {
            myGSpaceObj->computeLambdaAndCg();
          }
          when doneLambdaAndCg() {}

          //! Dump to file every ndump_frq iterations and the final iteration.
          //! Skip the first iteration because nothing moves before iter 2.
          if (config.stateOutput &&
              (myGSpaceObj->iteration % ndump_frq==0 ||
               myGSpaceObj->iteration == config.maxIter ||
               myGSpaceObj->exitFlag == 1)) {
            serial "SDAG_dynDoOutput" { myGSpaceObj->doOutput(); }
            when doneOutput() {}
          }

	  // TODO: rewrite this to clarify that IntegrateModForce happens here
	  ///      it should not be buried inside computeRedPsi

          serial "SDAG_dynComputeRedPsi" { myGSpaceObj->computeRedPsi(); }

          when doneRedPsi() {}

        }  // end if !_SDAG_DEBUG_PSI_OFF_

        //! Compute the Psi for the next iteration
        if (!_SDAG_DEBUG_PSI_OFF_) {
          serial "SDAG_dynComputeNewPsi" { myGSpaceObj->computeNewPsi(); }
          when doneNewPsi() {}

          if (isPsiVupdateNeeded) {
#ifdef GSP_USE_PRIMITIVE_ROTATION
            serial "SDAG_dynComputeNewPsiV" { myGSpaceObj->computeNewPsiV(); }
#else
            serial "SDAG_dynComputeNewPsiVFiniteDifference" {
              myGSpaceObj->computeNewPsiVFiniteDifference();
            }
#endif
            when donePsiV() serial "SDAG_dynUpdatePsiFlag" {
              isPsiVupdateNeeded = false;
            }
          }
        }  // end if !_SDAG_DEBUG_PSI_OFF_

        //! Wait for both the energy computation, and the atoms to be moved
        //! before going to the next iteration.
//        overlap {

          when doneMovingAtoms(const int AtomsGrpIter) {}
          if (!_SDAG_DEBUG_PSI_OFF_) {
            when doneComputingEnergy(const int AtomGrpIter) {}
          }
//        }

        //! Print out the iteration times.
        serial "SDAG_dynScreenPrintWallTimes" {
          myGSpaceObj->screenPrintWallTimes();
        }
      }  // end while simulation is running

      serial "SDAG_dynamicsDone" {
        thisProxy[thisIndex].dynamicsDone(myGSpaceObj->exitFlag);
      }
    };

    // Born-Oppenheimer Molecular Dynamics
    entry void computeBOMD() {
      while (myGSpaceObj->bomd_step < myGSpaceObj->num_steps) {
        serial "SDAG_bomdStartIteration" {
          myGSpaceObj->bomd_step++;
          computeMinimization();
        }
        when minimizationDone(bool success) serial "SDAG_bomdCheckIteration" {
          if (!success) {
            thisProxy[thisIndex].bomdDone(false);
            return;
          }
        }
      }
      serial "SDAG_bomdDone" { thisProxy[thisIndex].bomdDone(true); }
    };
  };
};



module gParticlePlane
{
  class UberCollection;
  class PPDummyMsg;

  message NLDummyMsg;
  message EnlCookieMsg;
  message GSPPIFFTMsg {complex data[];};

  message NLFFTMsg {complex data[];};
  message CompAtmForcMsg {double zmat[];};

  array [2D] CP_State_ParticlePlane
  {
    entry CP_State_ParticlePlane(int ,int ,int ,int ,int ,int ,int ,int ,int ,int ,int ,int ,int ,int ,int, UberCollection);
    entry void launchComputeZs();
    entry void computeZ(PPDummyMsg *dmsg);
    entry void reduceZ(int size, int atmIndex, complex zmatrix[size],complex zmatrix_fx[size], complex zmatrix_fy[size],complex zmatrix_fz[size]);
    entry void getForces(int zsize, int atmIndex, complex zmat[zsize]);
    entry void lPrioStartNLEes(NLDummyMsg *m);
    entry [nokeep] void setEnlCookie(EnlCookieMsg *m);
    entry void recvFromEesRPP(GSPPIFFTMsg  *m);
    entry void registrationDone(CkReductionMsg *msg);
    entry void printEnl(CkReductionMsg *msg);
  };

  // This is where the real component lives when using ees for nonlocal
  array [2D] CP_State_RealParticlePlane {
    entry CP_State_RealParticlePlane(int , int , int ,int , int ,int ,int,int, UberCollection);
    entry void init();
    entry void recvFromEesGPP(NLFFTMsg *);
    entry void recvZMatEes(CkReductionMsg *);
    entry [nokeep] void computeAtmForcEes(CompAtmForcMsg *msg);

    entry [nokeep] void setPlaneRedCookie(EnlCookieMsg *);
    entry [nokeep] void setEnlCookie(EnlCookieMsg *);
    entry void registrationDone();
    entry void printEnlR(CkReductionMsg *);
    entry void printEnlRSimp(double ,int,int);
    entry void recvZMatEesSimp(int size, double _zmat[size],int state, 
        int index, int iterNL_in);
    entry [local] void FFTNLEesFwdR();
    entry void launchFFTControl(int );
    entry void enlSectDone(CkReductionMsg *m);
    entry void planeRedSectDone(CkReductionMsg *m);
  };
};

module HartreeFock
{
  message HFInputMsg
  {
    double inputPsi[];
  };

  message HFTransposeMsg
  {
    complex partialColumn[];
  };

  nodegroup HFCalculator {
    entry HFCalculator();
    entry void acceptInputPsi(HFInputMsg *msg);
    entry void sendTransposeMsg(HFTransposeMsg *tmsgrcvd);
    entry void run() {
      while (true) {
        serial {
          initializeOuterproduct();
        }
        for (scount = 0; scount < totalStates; scount++) {
          serial {
            CProxy_CP_State_RealSpacePlane realproxy1 = UrealSpacePlaneProxy[0];
            for (int ii = 0; ii < mygridz; ii++) {
              realproxy1(scount, ii).sendPlease();
            }
          }
          for (lcount = 0; lcount < mygridz; lcount++) {
            when acceptInputPsi(HFInputMsg *msg) serial { fillOneState(msg); }
          }
          serial {
            aggregateOuterproduct();
          }
        }
        serial {
          doRowFFTs(myouterproduct, -1);
        }
        for (lcount = 0 ; lcount < totalnodes ; lcount++) {
          serial {
            scount = ((lcount + mynode) % totalnodes);
            mynumcols = regularSize;
            if (scount == (totalnodes - 1)) {
              mynumcols = extendedSize;
            }
            int msgSize = mynumrows * mynumcols;
            HFTransposeMsg *transmsg = new (msgSize) HFTransposeMsg;
            transmsg->tmsgsize = msgSize;
            transmsg->srcNode = mynode;
            transmsg->destNode = scount;
            int mycol = scount * regularSize;
            transmsg->startColumnNumber = mycol;
            transmsg->endColumnNumber = mycol + mynumcols - 1;
            transmsg->totalColumns = mynumcols;
            transmsg->numRows = mynumrows;
            transmsg->startingRow = myrowstart;
            for (int ctr = 0 ; ctr < mynumcols ; ctr++) {
              for (int myrow = 0 ; myrow < mynumrows ; myrow++) {
                transmsg->partialColumn[ctr*mynumrows+myrow].re = myouterproduct[myrow][mycol].re;
                transmsg->partialColumn[ctr*mynumrows+myrow].im = myouterproduct[myrow][mycol].im;
              }
              mycol++;
            }
            HFCalculatorProxy[scount].sendTransposeMsg(transmsg);
          }
          when sendTransposeMsg(HFTransposeMsg *tmsgrcvd) serial {
            if (tmsgrcvd->destNode != mynode) {
              CkAbort("abort because of destNode\n");
            }
            if (tmsgrcvd->startColumnNumber != myrowstart) {
              CkAbort("abort because of startColumnNumber\n");
            }
            if (tmsgrcvd->totalColumns != mynumrows) {
              CkAbort("abort because of totalColumns\n");
            }
            if (tmsgrcvd->startingRow >= oneStateSize) {
              CkAbort("abort because of startingRow\n");
            }
            if ((tmsgrcvd->startingRow + tmsgrcvd->numRows - 1) >= oneStateSize) {
              CkAbort("abort because of numRows\n");
            }
            if (tmsgrcvd->tmsgsize != (mynumrows * (tmsgrcvd->numRows))) {
              CkAbort("abort because of tmsgsize\n");
            }
            int indexpc = 0;
            for (int srow = 0 ; srow < mynumrows ; srow++) {
              for (int scol = tmsgrcvd->startingRow ; scol < (tmsgrcvd->startingRow + tmsgrcvd->numRows) ; scol++) {
                transposedouterproduct[srow][scol].re = tmsgrcvd->partialColumn[indexpc].re;
                transposedouterproduct[srow][scol].im = tmsgrcvd->partialColumn[indexpc].im;
                indexpc++;
              }
            }
            delete tmsgrcvd;
          }
        }
        serial {
          doRowFFTs(transposedouterproduct, 1);
          int mycount = 1;
          contribute(sizeof(int), &mycount, CkReduction::sum_int, CkCallback
            (CkReductionTarget(CP_State_RealSpacePlane, hfCalcOver), UrealSpacePlaneProxy[0]));
        }
      }
    };
  };
};

module gStatePlane
{
  extern module pcMessages;
  extern module instanceController;
  extern module RDMAMessages;
  extern module HartreeFock;

  class RDMApair_GSP_PC;
  class pcSetupMsg;
  message RDMASetupRequestMsg<RDMApair_GSP_PC>;
  message RDMASetupConfirmationMsg<RDMApair_GSP_PC>;
  message RSFFTMsg     { complex data[]; };
  message GSIFFTMsg    { complex data[]; };
  message GSRedPsiMsg  { complex data[]; };
  message InitDensity;
  message VksMsg {
    double data[];
  };

  message GStateOutMsg
  {
    complex data[];
    complex vdata[];
    int k_x[];
    int k_y[];
    int k_z[];
  };

  class UberCollection;
  include "paircalc/pcFwdDeclarations.h";
  include "load_balance/PeList.h";

  array [2D] CP_State_RealSpacePlane {
    entry CP_State_RealSpacePlane( int , int ,int, int, int,int, int, UberCollection);

    entry void run() {
      while (true) {
        for (count = 0; count < config.nchareG; count++) {
          // Partially FFTd data comes from CP_State_GSpacePlane
          when acceptFFT(RSFFTMsg *m) serial "SDAG_unpackFFT" { unpackFFT(m); }
        }
        serial "SDAG_doFFT" {
          iteration++;
          // Finish the FFT to create Psi[S,R]
          doFFT();
          // Reduction of Psi[S,R] to Rho[R] is invoked; Go to sleep
        }

        for (countProduct = 0; countProduct < config.nchareRhoR_y; ++countProduct) {
          // Rho chares multicast back VKS[R]
          when acceptVks(VksMsg *m) serial "SDAG_unpackVks" { unpackVks(m); }
        }

#ifdef RSVKS_BARRIER
        // Performance diagnostic barrier
        serial "SDAG_RSVKSBarrier" {
          contribute(CkCallback(CkIndex_CP_State_RealSpacePlane::rdoneVks(NULL),
                UrealSpacePlaneProxy[thisInstance.proxyOffset]));
        }
        when rdoneVks(CkReductionMsg *m) serial "SDAG_VksDelete" { delete m; }
#endif

        serial "SDAG_doVksFFTAndSendFPsi" {
          // Partially FFT VKS*Psi=Force
          thisProxy[thisIndex].doVksFFT();
          // Send the partially FFTd force to GSpacePlane
          sendFPsiToGSP();
        }

        if (HartreeFockOn) {
          when hfCalcOver(int totalcount) serial {
          }
        }
      }
    };

    entry void sendInputPsi (HFInputMsg* msg) {
      when sendPlease()
      serial {
        HFCalculatorProxy.acceptInputPsi(msg);
      }
    };

    entry [nokeep] void acceptFFT(RSFFTMsg *m);
    entry [nokeep] void acceptVks(VksMsg *m);
    entry [reductiontarget] void hfCalcOver(int totalcount);
    entry void sendPlease();
    entry [local] void doFFT();
    entry [local] void doVksFFT();
    entry void setNumPlanesToExpect(int num);
    entry void printData();
    entry [nokeep] void init(InitDensity *m);

#ifdef RSVKS_BARRIER
    entry void rdoneVks(CkReductionMsg *m);
#endif
  };

  array [2D]  CP_State_GSpacePlane
  {
    entry CP_State_GSpacePlane(int sizeX, int numG, int numR, int s_grain, int timekeepf, int timekeepb, UberCollection);
    entry void acceptPairCalcAIDs(pcSetupMsg *msg);
    entry void initGSpace(int m, complex pts[m], int mv, complex vpts[mv], int nx,int ny,int nz,int ngridaNL,int ngridbNL,int ngridcNL, int istart_cp);
    entry void acceptIFFT(GSIFFTMsg *msg);
    entry void completeRDMAhandshake(RDMASetupConfirmationMsg<RDMApair_GSP_PC> *msg);
    entry [nokeep] void acceptFileOutput(GStateOutMsg *msg);

    entry void acceptLambda(CkReductionMsg *msg);
    entry void acceptLambda(partialResultMsg *msg);
    entry void acceptNewPsi(CkReductionMsg *msg);
    entry void acceptNewPsi(partialResultMsg *msg);
    entry void acceptRedPsi(GSRedPsiMsg *msg);
    entry void acceptNewPsiV(CkReductionMsg *msg);
    entry void acceptNewPsiV(partialResultMsg *msg);
    entry void acceptRedPsiV(GSRedPsiMsg *msg);

    entry void makePCproxies();
    entry [local] void startNewIter();

    entry void computeEnergies(int p, double d);
    entry void acceptCgOverlap(CkReductionMsg *msg);
    entry void acceptNewTemperature(double temp);
    entry void readFile();
    entry [nokeep] void initBeadCookie(ICCookieMsg *msg);
    entry [nokeep] void minimizeSync(ICCookieMsg *msg);
    entry void setExitFlag();

    // Barriers can be turned on for performance diagnostics
#ifdef BARRIER_CP_GSPACE_IFFT
    entry [nokeep] void allDoneIFFT(CkReductionMsg *msg);
#endif
#ifdef BARRIER_CP_GSPACE_PSI
    entry [nokeep] void allDonePsi(CkReductionMsg *msg);
#endif
#ifdef BARRIER_CP_GSPACE_PSIV
    entry [nokeep] void allDonePsiV(CkReductionMsg *msg);
#endif

    // SDAG ////////
    entry void computePsiFandVKS() {
      serial "SDAG_doFFTAndSendFFTData" {
        // Do the z-FFT
        doFFT();
        // Transpose by sending to RealSpaceStatePlane
        sendFFTData();
      }
      // Wait for RealSpaceStatePlane to send back partially FFTd forces
      while (countIFFT != gs.planeSize[1]) {
        when acceptIFFT(GSIFFTMsg *msg) serial "SDAG_unpackIFFT" {
          unpackIFFT(msg);
        }
      }
      serial "SDAG_doIFFT" {
        countIFFT = 0;
        // Complete forces from VKS

        doIFFT();
      }
#ifdef BARRIER_CP_GSPACE_IFFT
      when allDoneIFFT(CkReductionMsg* msg) {}
#endif
      serial "SDAG_donePsiFandVKS" {
        UgSpaceDriverProxy[thisInstance.proxyOffset](thisIndex.x,thisIndex.y).donePsiFandVKS();
      }
    };

    entry void computeLambdaAndCg() {
      // Lambda sending is needed for CgOverlap even if ortho is turned off
      serial "SDAG_sendLambda" {
        // We launch the computation of the constraint force
        sendLambda();
      }
      if (!_SDAG_DEBUG_ORTHO_OFF_) {
        while (countLambda != AllLambdaExpected) {
          case {
            when acceptLambda(CkReductionMsg *msg) serial "SDAG_unpackLambda" {
              unpackLambda(msg);
            }
            when acceptLambda(partialResultMsg *msg)
              serial "SDAG_unpackPartialLambda" { unpackLambda(msg); }
          }
        }
        serial "SDAG_doLambda" { doLambda(); }
      }
      serial "SDAG_computeCgOverlap" { computeCgOverlap(); }
      when acceptCgOverlap(CkReductionMsg *msg) serial "SDAG_finishLambdaAndCg" {
        psiCgOvlap(msg);
        UgSpaceDriverProxy[thisInstance.proxyOffset](thisIndex.x,thisIndex.y).doneLambdaAndCg();
      }
    };

    entry void computeRedPsi() {
      serial "SDAG_integrateModeForceAndSendRedPsi" {
        // Update the Psis using the forces modified by lambda
        integrateModForce();
        // At the gamma point synchronize redundant points on Gx = 0
        sendRedPsi();
      }
      while (iRecvRedPsi == 0) {
        when acceptRedPsi(GSRedPsiMsg *msg) serial "SDAG_unpackRedPsi" {
          unpackRedPsi(msg);
        }
      }
      serial "SDAG_finishRedPsi" {
        doneRedPsiIntegrate();
        UgSpaceDriverProxy[thisInstance.proxyOffset](thisIndex.x,thisIndex.y).doneRedPsi();
      }
    };

    entry void computeNewPsi() {
      serial "SDAG_sendPsi" { sendPsi(); }
      if (!_SDAG_DEBUG_ORTHO_OFF_) {
        while (countPsi != AllPsiExpected) {
          case {
            when acceptNewPsi(CkReductionMsg *msg) serial "SDAG_unpackNewPsi" {
              unpackNewPsi(msg);
            }
            when acceptNewPsi(partialResultMsg *msg)
              serial "SDAG_unpackPartialNewPsi" { unpackNewPsi(msg); }
          }
        }
        serial "SDAG_doNewPsi" { doNewPsi(); }
#ifdef BARRIER_CP_GSPACE_PSI
        when allDonePsi(CkReductionMsg *msg) {}
#endif
        serial "SDAG_doneNewPsi" {
          UgSpaceDriverProxy[thisInstance.proxyOffset](thisIndex.x, thisIndex.y).doneNewPsi();
        }
      }
    };

    entry void computeNewPsiV() {
      serial "SDAG_sendRedPsiV" {
        acceptedVPsi = false;
        sendRedPsiV();
      }
      while (iRecvRedPsiV == 0) {
        when acceptRedPsiV(GSRedPsiMsg *msg) serial "SDAG_unpackRedPsiV" {
          unpackRedPsiV(msg);
        }
      }
      serial "SDAG_doneRedPsiV" {
        doneRedPsiVIntegrate();
        sendPsiV();
      }
      while (countVPsi != AllPsiExpected) {
        case {
          when acceptNewPsiV(CkReductionMsg *msg) serial "SDAG_unpackNewPsiV" {
            unpackNewPsiV(msg);
          }
          when acceptNewPsiV(partialResultMsg *msg)
            serial "SDAG_unpackPartialNewPsiV" { unpackNewPsiV(msg); }
        }
      }
      serial "SDAG_doNewPsiV" { doNewPsiV(); }
#ifdef BARRIER_CP_GSPACE_PSIV
      when allDonePsiV(CkReductionMsg *msg) {}
#endif
      serial "SDAG_donePsiV" {
        UgSpaceDriverProxy[thisInstance.proxyOffset](thisIndex.x, thisIndex.y).donePsiV();
      }
    };

    entry void computeNewPsiVFiniteDifference() {
      serial "SDAG_finiteDifferencePsiV" {
        finiteDifferencePsiV();
      }
#ifdef BARRIER_CP_GSPACE_PSIV
      when allDonePsiV(CkReductionMsg *msg) {}
#endif
      serial "SDAG_doneFiniteDifferencePsiV" {
        UgSpaceDriverProxy[thisInstance.proxyOffset](thisIndex.x, thisIndex.y).donePsiV();
      }
    };


    entry void doOutput() {
      // Everyone sends their portion of the output to the reduction plane
      serial "SDAG_contributeFileOutput" { contributeFileOutput(); }

      // The reduction plane collects all of the output, and writes the file
      if (thisIndex.y == redPlane) {
        while (countFileOut < config.nchareG) {
          when acceptFileOutput(GStateOutMsg* msg)
            serial "SDAG_unpackFileOutput" { unpackFileOutput(msg); }
        }
        serial "SDAG_writeOutputFile" { writeOutputFile(); }
      }

      // Everyone contributes to the reduction saying that output has completed
      serial "SDAG_doneOutput" {
        contribute(CkCallback(CkIndex_GSpaceDriver::doneOutput(), UgSpaceDriverProxy[thisInstance.proxyOffset]));
      }
    };
  };
};
/*@}*/
