/** \file cpaimd.ci
 *
 */

mainmodule cpaimd {	

	readonly int nstates;
	readonly int sizeX;
	readonly int nchareG;
	readonly int Ortho_UE_step2;
	readonly int Ortho_UE_step3;
	readonly int Ortho_UE_error;
	readonly bool Ortho_use_local_cb;

        extern module ckPairCalculator;
	extern module CLA_Matrix; 

	readonly CkHashtableT<intdual, int> GSmaptable;
	readonly CkHashtableT<intdual, int> RSmaptable;
	readonly CkHashtableT<intdual, int> RSPmaptable;
	readonly CkHashtableT<intdual, int> RhoGSmaptable;
	readonly CkHashtableT<intdual, int> RhoRSmaptable;
	readonly CkHashtableT<intdual, int> RhoGHartmaptable;
	readonly CkHashtableT<intdual, int> RhoRHartmaptable;
	readonly CkHashtableT<intdual, int> AsymScalcmaptable;
	readonly CkHashtableT<intdual, int> SymScalcmaptable;


	readonly Config config;
	readonly PairCalcID pairCalcID1;
	readonly PairCalcID pairCalcID2;


	readonly CProxy_CP_State_GSpacePlane gSpacePlaneProxy;
	readonly CProxy_CP_State_ParticlePlane particlePlaneProxy;
	readonly CProxy_CP_State_RealSpacePlane realSpacePlaneProxy;
	readonly CProxy_CP_State_RealParticlePlane realParticlePlaneProxy;
	readonly CProxy_CP_Rho_RealSpacePlane rhoRealProxy;
	readonly CProxy_CP_Rho_GSpacePlane rhoGProxy;
	readonly CProxy_CP_Rho_GHartExt rhoGHartExtProxy;
	readonly CProxy_CP_Rho_RHartExt rhoRHartExtProxy;
	readonly CProxy_Ortho orthoProxy;
	readonly CProxy_AtomsGrp atomsGrpProxy;
	readonly CProxy_CPcharmParaInfoGrp scProxy;
	readonly CProxy_EnergyGroup egroupProxy;
	readonly CProxy_FFTcache fftCacheProxy;
	readonly CProxy_StructFactCache sfCacheProxy;
	readonly CProxy_StructureFactor sfCompProxy;
	readonly CProxy_eesCache                   eesCacheProxy;
	
	readonly CkGroupID mCastGrpId;

        // exc, hart, eext communication
	readonly ComlibInstanceHandle commGHartInstance;
	readonly ComlibInstanceHandle commGInstance0;
	readonly ComlibInstanceHandle commGInstance1;
	readonly ComlibInstanceHandle commGInstance2;
	readonly ComlibInstanceHandle commGInstance3;	
	readonly ComlibInstanceHandle commGByrdInstance;
	readonly ComlibInstanceHandle commRealInstance;
	readonly ComlibInstanceHandle commRealIGXInstance;
	readonly ComlibInstanceHandle commRealIGYInstance;
	readonly ComlibInstanceHandle commRealIGZInstance;

        // pc communication
	readonly ComlibInstanceHandle gAsymInstance;
	readonly ComlibInstanceHandle gSymInstance;

        // multicast for vks to states and other things
	readonly ComlibInstanceHandle mcastInstance;
	readonly ComlibInstanceHandle mcastInstancePP;
	readonly ComlibInstanceHandle mcastInstanceRPP;
	readonly ComlibInstanceHandle mcastInstancemRPP;

        // density from psi : g->r and r->g
	readonly ComlibInstanceHandle mssInstance;
	readonly ComlibInstanceHandle gssInstance;

        // Nonlocal Ees method : g->r and r->g
	readonly ComlibInstanceHandle gssPInstance;
	readonly ComlibInstanceHandle mssPInstance;

        // Eext method : g->r and r->g
	readonly ComlibInstanceHandle commRHartGHartIns;
	readonly ComlibInstanceHandle commGHartRHartIns0;
	readonly ComlibInstanceHandle commGHartRHartIns1;

        // PINY Physics readonly data structures
        readonly MDINTEGRATE  readonly_mdintegrate;
        readonly MDATOMS      readonly_mdatoms;
        readonly MDINTER      readonly_mdinter;
        readonly MDINTRA      readonly_mdintra;
        readonly GENERAL_DATA readonly_general_data;
        readonly CP           readonly_cp; 

	message PPDummyMsg;
	message SFDummyMsg;
	message RSDummyResume;
	message GHartDummyMsg;

	message ProductMsg {double data[];};	
	message AtomMsg {double data[];};	
	
	message EnlCookieMsg;

	message StructFactorMsg {
		complex structFactor[];
		complex structFactor_fx[];
		complex structFactor_fy[];
		complex structFactor_fz[];
	};
	
	message TMsg {complex data[];};
	
	message GSIFFTMsg {complex data[];};

	message GSPPIFFTMsg {complex data[];};

	message RSFFTMsg {complex data[];};

	message RSPPFFTMsg {complex data[];};

	message RhoGSFFTMsg {complex data[];};

	message RhoGHartMsg {complex data[];};

	message RhoRHartMsg {complex data[];};

	message RhoRSFFTMsg {complex data[];};

	message RhoHartRSFFTMsg {complex data[];};

	message GSRedPsiMsg {complex data[];};

	message GSAtmMsg;

	message GStateOutMsg {
		complex data[];
		complex vdata[];
		int k_x[];
		int k_y[];
		int k_z[];
	};

	message NLFFTMsg {complex data[];};

	mainchare main {
		entry main();
	        entry void doneInit(CkReductionMsg *msg);
	};

	array [2D]  CP_State_GSpacePlane {
		entry CP_State_GSpacePlane(int sizeX, size2d planeSize, 
                        int numG, int numR, int s_grain, int numChunks);
		entry void initGSpace(int n, RunDescriptor r[n], int m, 
			complex pts[m],int mv, complex vpts[mv], 
                        int nx,int ny,int nz,int ngridaNL,int ngridbNL,int ngridcNL,
                        int istart_cp);
		entry void doIFFT(GSIFFTMsg *);
		entry void doFFT();
		entry void syncpsi();

                entry [nokeep] void acceptAtoms(GSAtmMsg *msg);
                entry [nokeep] void acceptEnergy(GSAtmMsg *msg);
                entry void collectFileOutput(GStateOutMsg *msg);
		entry void acceptNewPsi(CkReductionMsg *msg);	
		entry void acceptNewPsi(partialResultMsg *msg);	
		entry void acceptRedPsi(GSRedPsiMsg *msg);	

		entry void acceptLambda(CkReductionMsg *msg);
		entry void acceptLambda(partialResultMsg *msg);
		entry void acceptAllLambda(CkReductionMsg *msg);

		entry void acceptNewPsiV(CkReductionMsg *msg);
		entry void acceptNewPsiV(partialResultMsg *msg);
		entry void requirePsiV();
		entry void resumePsiV(CkReductionMsg *msg);
		entry void gdonePsiV(CkReductionMsg *msg);
		entry void gdonePsi(CkReductionMsg *msg);

		entry void makePCproxies();
		entry void isAtSync(int);
		entry void startNewIter ();
		entry void startNLEes ();
		entry void gdoneIFFT(CkReductionMsg *msg);

		entry void psiWriteComplete(CkReductionMsg *msg);
		entry void computeEnergies(int p, double d);
                entry void run ();
                entry void psiCgOvlap(CkReductionMsg *);
		entry void readFile();
		entry void combineForcesGetEke();	
	};
	
	array [2D] CP_State_ParticlePlane {
		entry CP_State_ParticlePlane(int ,int ,int ,int ,int ,int ,int ,
                                             int ,int ,int ,int ,int ,int ,int ,int);
		entry void computeZ(PPDummyMsg *dmsg);
		entry void reduceZ(int size, int atmIndex, complex zmatrix[size],
			complex zmatrix_fx[size], complex zmatrix_fy[size],
                        complex zmatrix_fz[size]);
		entry void getForces(int zsize, int atmIndex, complex zmat[zsize]);
		entry [nokeep] void setEnlCookie(EnlCookieMsg *m);	
		entry void recvFromEesRPP(GSPPIFFTMsg  *m);
		entry void startNLEes (int);
                entry void registrationDone(CkReductionMsg *msg);
	};

	array [2D] CP_State_RealParticlePlane {
		entry CP_State_RealParticlePlane(int , int , int ,int , int ,int ,int,int);
                entry void recvFromEesGPP(NLFFTMsg *);
                entry void recvZMatEes(CkReductionMsg *);
                entry void computeAtmForcEes(int nZmat, double zmat_loc[nZmat],
                                             int iterNL_in);
                entry [nokeep] void setPlaneRedCookie(EnlCookieMsg *);
                entry [nokeep] void setEnlCookie(EnlCookieMsg *);
                entry void registrationDone(CkReductionMsg *msg);
		entry void printEnlR(CkReductionMsg *);
		entry void printEnlRSimp(double ,int,int);
                entry void recvZMatEesSimp(int size, double _zmat[size],int state, 
                                           int index, int iterNL_in);
	};

	array [2D] CP_State_RealSpacePlane {
		entry CP_State_RealSpacePlane(size2d planeSize, int numG, int numR);
		entry void doFFT(RSFFTMsg *);
		entry [nokeep] void doProduct(ProductMsg *m);
		entry void doProduct(int size, double data[size]);
		entry void setNumPlanesToExpect(int num);
		entry void printData();
		entry void resumeProduct(RSDummyResume *msg);
		entry [nokeep] void init(ProductMsg *m);
	};

	array [2D] CP_Rho_RealSpacePlane {	
		entry CP_Rho_RealSpacePlane(int, size2d, int, int, bool,int,int);
		entry void acceptDensity(CkReductionMsg *m);
		entry void acceptGradRhoVks(RhoRSFFTMsg *msg);
		entry void acceptHartVks(RhoHartRSFFTMsg *msg);
		entry void acceptWhiteByrd(RhoRSFFTMsg *msg);
		entry void isAtSync(int);
	};
       array [2D] CP_Rho_RHartExt {
                entry CP_Rho_RHartExt(int, int, int,int,int);
                entry void startEextIter();
                entry void recvAtmForcFromRhoGHart(RhoRHartMsg *msg);
                entry void registrationDone(CkReductionMsg *msg);
        }

	array [2D] CP_Rho_GSpacePlane {
		entry CP_Rho_GSpacePlane(int, size2d, int, int, bool);
		entry void acceptData(RhoGSFFTMsg *msg);
		entry void acceptWhiteByrd(RhoGSFFTMsg *msg);
		entry void isAtSync(int);
	};

	array [2D] CP_Rho_GHartExt {
		entry CP_Rho_GHartExt(size2d,int,int,int,int,int);
		entry void acceptData(RhoGHartMsg *msg);
		entry void isAtSync(int);
		entry void recvAtmSFFromRhoRHart(RhoGHartMsg *msg);
                entry void registrationDone(CkReductionMsg *msg);
	};


	class CLA_Matrix_interface;

	array [2D] Ortho{
		entry void Ortho(int m, int n, CLA_Matrix_interface matA1,
		 CLA_Matrix_interface matB1, CLA_Matrix_interface matC1,
		 CLA_Matrix_interface matA2, CLA_Matrix_interface matB2,
		 CLA_Matrix_interface matC2, CLA_Matrix_interface matA3,
		 CLA_Matrix_interface matB3, CLA_Matrix_interface matC3);
		entry Ortho();
		entry void acceptAllLambda(CkReductionMsg *msg);
		entry void acceptSectionLambda(CkReductionMsg *msg);
		entry void resume();
		entry void resumeV(CkReductionMsg *msg);
		entry void maxCheck(CkReductionMsg *msg);
		entry void lbresume(CkReductionMsg *msg);
		entry void makeSections(int indexSize, int indexZ[indexSize]);
		entry void setPCproxy(CProxySection_PairCalculator inproxy);
		entry void start_calc(CkReductionMsg *msg);
		entry void do_iteration();
		entry void step_2();
		entry void step_3();
		entry void collect_results();
		entry void print_results();
  		entry void collect_error(CkReductionMsg *msg);
		entry void ready();
		entry void all_ready();
      };

	group OrthoMap : CkArrayMap {
		entry OrthoMap(int M,int nOrtho);
	};

	group RhoGSMap : CkArrayMap {
		entry RhoGSMap();
	};

	group RhoRSMap : CkArrayMap {
		entry RhoRSMap();
	};

	group RhoGHartMap : CkArrayMap {
		entry RhoGHartMap();
	};

	group RhoRHartMap : CkArrayMap {
		entry RhoRHartMap();
	};
        
	group GSMap : CkArrayMap {
		entry GSMap();
	};
	
	group RSPMap : CkArrayMap {
		entry RSPMap();
	};


	group RSMap : CkArrayMap {
		entry RSMap();
	};
	
	group SCalcMap: CkArrayMap {
		entry SCalcMap(bool);
	};
	group FFTcache {
		entry FFTcache(size2d, int,int,int,int,int,int,int,int);
	};

	group StructFactCache {
		entry void acceptStructFact(StructFactorMsg *msg);

		entry StructFactCache(int numSfGrps,int natm_nl,int natm_nl_grp_max);
	};
        array [3D] StructureFactor {
	        entry StructureFactor(int, int, int,int nsend, int destinations[nsend]);
	        entry void acceptDestination(int nsend, int destinations[nsend]);
         	entry void computeSF(SFDummyMsg *msg);
		entry void acceptKVectors(int n, int k_x[n], int k_y[n], int k_z[n]);
	};

	group AtomsGrp {
		entry AtomsGrp(int natm, int natm_nl,int len_nhc,
                               int iextended_on,int cp_min_opt,int cp_wave_opt,
                               int isokin_opt,
                               double kT,Atom atoms[natm],AtomNHC atomsNHC[natm]);
		entry void contributeforces(double pot_ewald);
		entry void zeroforces();
                entry void StartRealspaceForces();
                entry void recvContribute(CkReductionMsg *);
                entry void atomsDone(CkReductionMsg *);
                entry void acceptAtoms(AtomMsg *);
	};

	group CPcharmParaInfoGrp {
		entry CPcharmParaInfoGrp(CPcharmParaInfo &s);
	};

	group EnergyGroup {
		entry EnergyGroup();
		entry void updateEnergiesFromGS(EnergyStruct es);
                entry void energyDone(CkReductionMsg *);
	};
	
	group eesCache {
		entry eesCache(int,int,int,int);
	};
	

};
