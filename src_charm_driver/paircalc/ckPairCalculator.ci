/** \file ckPairCalculator.ci
 *
 */

module pcMessages {

  include "paircalc/pcFwdDeclarations.h";

  initnode registersumMatrixDouble(void);

  message initResultMsg;

  message initGRedMsg;

  message sendBWsignalMsg;

  message sendFWRDMAsignalMsg;

  message partialResultMsg  {
    complex result[];
  };

  message priorSumMsg  {
    complex result[];
  };

  message mySendMsg  {
    complex data[];
  };

  message paircalcInputMsg {
    inputType points[];
  };

  message multiplyResultMsg  {
    internalType matrix1[];
    internalType matrix2[];
  };

  message entireResultMsg  {
    double matrix[];
  };

  message entireResultMsg2  {
    double matrix1[];
    double matrix2[];
  };

  message RDMAHandleMsg;

};



module RDMAMessages 
{
  template<class tokenType> message RDMASetupRequestMsg;
  template<class tokenType> message RDMASetupConfirmationMsg;
};



module pcMaps
{
  include "load_balance/IntMap.h";
  group SCalcMap: CkArrayMap {
    entry SCalcMap(const MapType4 _mtable);
  };
};



module inputDataHandler 
{
  extern module RDMAMessages;
  // Forward declaration
  class RDMApair_GSP_PC;
  class CProxy_PairCalculator;
  // Template Instantiation 
  message RDMASetupRequestMsg<RDMApair_GSP_PC>;
  message RDMASetupConfirmationMsg<RDMApair_GSP_PC>;

  template <class leftHandlerType, class rightHandlerType> array [4D] InputDataHandler
  {
    entry InputDataHandler(CProxy_PairCalculator pcProxy);
    entry [nokeep] void acceptLeftData (paircalcInputMsg *msg);
    entry [nokeep] void acceptRightData(paircalcInputMsg *msg);
    entry [nokeep] void setupRDMALeft (RDMASetupRequestMsg<RDMApair_GSP_PC> *msg);
    entry [nokeep] void setupRDMARight(RDMASetupRequestMsg<RDMApair_GSP_PC> *msg);
  };
};



module ckPairCalculator 
{

  extern module pcMessages;
  extern module inputDataHandler;

  include "paircalc/pcFwdDeclarations.h";
  array [4D] InputDataHandler <CollatorType,CollatorType>;

  array [4D] PairCalculator 
  {
    entry PairCalculator(const pc::pcConfig cfg);
    entry void lbsync();
    entry void bwbarrier(CkReductionMsg *msg);
    entry void sendBWResult(sendBWsignalMsg *msg);
    entry void sendBWResultDirect(sendBWsignalMsg *msg);
    entry [nokeep] void initGRed(initGRedMsg *msg);
    entry [nokeep] void initResultSection(initResultMsg *msg);
    entry void multiplyForwardRDMA();
    entry [nokeep] void multiplyResult(multiplyResultMsg *msg);
    entry [nokeep] void acceptOrthoT(multiplyResultMsg *msg);
    entry [nokeep,inline] void multiplyResultI(multiplyResultMsg *msg);
    entry [inline] void acceptLeftData (paircalcInputMsg *msg);
    entry [inline] void acceptRightData(paircalcInputMsg *msg);
    entry [local] void multiplyForward(bool);
    entry [local] void bwMultiplyDynOrthoT();
    entry [local] void multiplyPsiV();
    entry void phantomDone();
  };
}
