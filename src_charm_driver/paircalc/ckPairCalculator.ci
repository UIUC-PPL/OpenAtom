/** \file ckPairCalculator.ci
 *
 */

module ckPairCalculator {
	readonly ComlibInstanceHandle mcastInstanceCP;
	readonly ComlibInstanceHandle mcastInstanceACP;

	initproc registersumMatrixDouble(void);	

	message initResultMsg;

	message initGRedMsg;

	message sendBWsignalMsg;

	message partialResultMsg  {
	  complex result[];
	};

	message priorSumMsg  {
	  complex result[];
	};

	message mySendMsg  {
	  complex data[];
	};

	message calculatePairsMsg  {
	  complex points[];
	};

	message phantomMsg  {
	  double points[];
	};

	message multiplyResultMsg  {
	  double matrix1[];
	  double matrix2[];
	};

	message entireResultMsg  {
	  double matrix[];
	};

	message entireResultMsg2  {
	  double matrix1[];
	  double matrix2[];
	};
	
	message RDMAHandleMsg;

	array [4D] PairCalculator {

 		entry PairCalculator(bool, int, int, int, CkCallback cb, CkArrayID final_callbackid, int final_callback_ep, int callback_ep_tol, int rdma_ep, int conserveMemory, bool lbpaircalc,  redtypes cpreduce, int orthoGrainSize, bool collectTiles, bool streambw, bool delaybw, int streamFW, bool gSpaceSum, int gpriority, bool phantomSym, bool useBWbarrier, int gemmfwk, int gemmfwm, int gemmbw, bool expectOrthoT);
   		entry void lbsync();
   		entry void bwbarrier(CkReductionMsg *msg);
		entry void sendBWResult(sendBWsignalMsg *msg);
		entry void sendBWResultDirect(sendBWsignalMsg *msg);
		entry [nokeep] void initGRed(initGRedMsg *msg);
		entry [nokeep] void initResultSection(initResultMsg *msg);
   		entry [nokeep] void acceptPairData(calculatePairsMsg *msg);
   		entry void acceptPhantomData(phantomMsg *msg);
		entry void multiplyForwardRDMA(bool);
		entry [nokeep] void multiplyResult(multiplyResultMsg *msg);
		entry [nokeep] void acceptOrthoT(multiplyResultMsg *msg);
		entry [nokeep,inline] void multiplyResultI(multiplyResultMsg *msg);
		entry void receiveRDMASenderNotify(int senderProc, int indexX, 
		      int indexY, int size, int totalsize);
     
	};
}
