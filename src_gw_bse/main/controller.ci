
module controller {
  include "matrix.h";
  extern module psi_cache;
  extern module eps_matrix;
  extern module matrix;
  extern module pmatrix;
  extern module mat_mul;
  extern module main;
  readonly CProxy_Controller controller_proxy;

#define percent 25
#define REGISTER_REGIONS

#define START_STEP(x)\
  stopwatch.startTimer(x);

#define STOP_STEP(x)\
  stopwatch.stopTimer(x);\
  CkPrintf("[CONTROLLER] %-40s @%.2fs (%.2fs elapsed)\n", x, stopwatch.getEnd(x), stopwatch.getElapsed(x));

#define STOP_BIG_STEP(x)\
  stopwatch.stopTimer(x);\
  CkPrintf("[CONTROLLER] ====================================================================\n");\
  CkPrintf("[CONTROLLER] ==== %-35s @%.2fs (%.2fs elapsed)\n", x, stopwatch.getEnd(x), stopwatch.getElapsed(x));\
  CkPrintf("[CONTROLLER] ====================================================================\n\n");

  // Describes and controls the main control flow of the entire computation, by
  // by coordinating communication between all other chares in the system.
  chare Controller {
    entry Controller();

    // reductions used for control flow
#if USE_CLA
    entry void matrixReady();
#endif
    entry void computeEpsDimensions();
    entry void calc_Geps();
    entry void receiveEpsDimensions(std::vector<int> accept, std::vector<int>
                                    geps_x,std::vector<int> geps_y,
                                    std::vector<int> geps_z, int epsilon_size);
    entry void got_vcoulb(std::vector<double> vcoulb);
    entry [reductiontarget] void fftControllerReady();
    entry [reductiontarget] void psiCacheReady();
    entry [reductiontarget] void fCacheReady();
    entry [reductiontarget] void cachesFilled();
    entry [reductiontarget] void registrationComplete();
    entry [reductiontarget] void psiComplete();
    entry [reductiontarget] void fftComplete();
    entry [reductiontarget] void transposeComplete();
    entry [reductiontarget] void copyComplete(bool success);
    entry [reductiontarget] void transpose_complete();
    entry [reductiontarget] void copy_complete();
    entry [reductiontarget] void m_multiplied();
    entry [reductiontarget] void conjugateComplete();
    entry [reductiontarget] void complement_multiplied();
    entry [reductiontarget] void found_alpha(double alpha);
    entry [reductiontarget] void scalar_multiplied();
    entry [reductiontarget] void converge_results(double max);
    entry [reductiontarget] void prepare_epsilon();
    entry [reductiontarget] void epsilon_created();
    entry [reductiontarget] void bareExchangeComplete(CkReductionMsg* msg);
    entry [reductiontarget] void screenedExchangeComplete(CkReductionMsg* msg);
    entry [reductiontarget] void cohComplete(CkReductionMsg* msg);
    entry [reductiontarget] void s_ready();
    entry [reductiontarget] void readComplete(bool success);
    entry [reductiontarget] void writeComplete(bool success);
    entry [reductiontarget] void verifyComplete(bool success);
    entry void PMatrixFormed();
    entry void EpsilonFormed();
    entry void EpsilonInverted();

    entry void reportFTime(CkReductionMsg*);
    entry void reportPTime(CkReductionMsg*);

    entry [reductiontarget] void iterationComplete(){
      serial{
        pmatrix1D_proxy.start_iteration();
      }
    }
    // Main control flow
    entry void run() {
      /************************************************************************/
      /** Setup ***************************************************************/
      /************************************************************************/
      when fftControllerReady() serial {
        //precompute epsilon dimensions to enable caching necessary subsets of f-vectors
        computeEpsDimensions();
      }
      when receiveEpsDimensions(std::vector<int> accept,
                                std::vector<int> geps_x,
                                std::vector<int> geps_y,
                                std::vector<int> geps_z,
                                int epsilon_size) serial {
        accept_result = accept;
        PAD(epsilon_size);
        fvector_cache_proxy.setDim(padded_epsilon_size/eps_rows,
                                    accept,geps_x,geps_y,geps_z);
        states_proxy.fftGtoR();
      }
      when fftComplete(), psiCacheReady() serial {
        #ifdef REGISTER_REGIONS
        pmatrix2D_proxy.registerTileSections();
        #endif
        for (next_K = 0; next_K < K; next_K++) {
          for (next_state = 0; next_state < L; next_state++) {
            states_proxy(0, next_K, next_state).sendToCache();
          }
        }
      }
      when fCacheReady(), cachesFilled(), registrationComplete() serial {
        psi_cache_proxy.reportInfo();
        STOP_BIG_STEP("SETUP COMPLETED");
      }

      /************************************************************************/
      /** Phase 1: Form the P Matrix ******************************************/
      /************************************************************************/
      serial {
        if (!p_config.read) {
          thisProxy.formPMatrix();
        } else {
          CkPrintf("[CONTROLLER] Reading P Matrix from files %s...\n",
              p_config.read_prefix.c_str());
          matrixRead(pmatrix1D_proxy, p_config.read_prefix, readCB);
          START_STEP("P MATRIX READ FROM FILE");
        }
      }
      case {
        when PMatrixFormed() {
          if (p_config.write || p_config.verify) {
            serial {
              START_STEP("P MATRIX IO COMPLETED");
            }
            if (p_config.write) {
              serial {
                matrixWrite(pmatrix1D_proxy, p_config.write_prefix, writeCB);
              }
              when writeComplete(bool success) serial {
                if (success) {
                  CkPrintf("[CONTROLLER] P Matrix written out to %s\n",
                      p_config.write_prefix.c_str());
                } else {
                  CkPrintf("[CONTROLLER] Error writing P Matrix out to %s\n",
                      p_config.write_prefix.c_str());
                }
              }
            }
            if (p_config.verify) {
              serial {
                matrixVerify(pmatrix1D_proxy, p_config.verify_prefix, verifyCB);
              }
              when verifyComplete(bool success) serial {
                if (success) {
                  CkPrintf("[CONTROLLER] P Matrix verification against %s success!\n",
                      p_config.verify_prefix.c_str());
                } else {
                  CkPrintf("[CONTROLLER] P Matrix verification against %s failed!\n",
                      p_config.verify_prefix.c_str());
                }
              }
            }
            serial { STOP_BIG_STEP("P MATRIX IO COMPLETED"); }
          }
        }
        when readComplete(bool success) serial {
          if (!success) {
            CkAbort("Failed to read in P Matrix from file!\n");
          } else {
            STOP_BIG_STEP("P MATRIX READ FROM FILE");
          }
        }
      }

      /************************************************************************/
      /** Phase 2: Form the Epsilon Matrix ************************************/
      /************************************************************************/
      serial {
        MatrixConfig cfg2D;
        cfg2D.mat_rows = cfg2D.mat_cols = padded_epsilon_size;
        cfg2D.tile_rows = eps_rows;
        cfg2D.tile_cols = eps_cols;

        CProxy_EpsMap map = CProxy_EpsMap::ckNew(cfg2D);
        CkArrayOptions opts(cfg2D.chareRows(), cfg2D.chareCols());
        opts.setMap(map);

        eps_matrix2D_m_proxy = CProxy_EpsMatrix::ckNew(
            cfg2D, opts);
        eps_matrix2D_mT_proxy = CProxy_EpsMatrix::ckNew(
            cfg2D, opts);
        eps_matrix2D_X_proxy = CProxy_EpsMatrix::ckNew(
            cfg2D, opts);
        eps_matrix2D_A_proxy = CProxy_EpsMatrix::ckNew(
            cfg2D, opts);
        eps_matrix2D_M1_proxy = CProxy_EpsMatrix::ckNew(
            cfg2D, opts);
        eps_matrix2D_X1_proxy = CProxy_EpsMatrix::ckNew(
            cfg2D, opts);

        s_matrix2D_proxy = CProxy_EpsMatrix::ckNew(
            cfg2D, opts);

        MatrixConfig cfg1D = convertTo1D(cfg2D, eps_rows);
        eps_matrix1D_proxy = CProxy_EpsMatrix::ckNew(
            cfg1D, cfg1D.chareRows(), cfg1D.chareCols());

        if (!eps_config.read) {
          thisProxy.formEpsilon();
        } else {
          CkPrintf("[CONTROLLER] Reading Epsilon Matrix from files %s...\n",
              eps_config.read_prefix.c_str());
          matrixRead(eps_matrix1D_proxy, eps_config.read_prefix, readCB);
          START_STEP("EPSILON READ FROM FILE");
        }
      }
      case {
        when EpsilonFormed() {
          if (eps_config.write || eps_config.verify) {
            serial {
              matrixCopy(eps_matrix2D_m_proxy, eps_matrix1D_proxy, copyCB);
              START_STEP("EPSILON IO COMPLETED");
            }
            when copyComplete(bool success) {}

            if (eps_config.write) {
              serial {
                matrixWrite(eps_matrix1D_proxy, eps_config.write_prefix, writeCB);
              }
              when writeComplete(bool success) serial {
                if (success) {
                  CkPrintf("[CONTROLLER] Epsilon Matrix written out to %s\n",
                      eps_config.write_prefix.c_str());
                } else {
                  CkPrintf("[CONTROLLER] Error writing Epsilon Matrix out to %s\n",
                      eps_config.write_prefix.c_str());
                }
              }
            }
            if (eps_config.verify) {
              serial {
                matrixVerify(eps_matrix1D_proxy, eps_config.verify_prefix, verifyCB);
              }
              when verifyComplete(bool success) serial {
                if (success) {
                  CkPrintf("[CONTROLLER] Epsilon Matrix verification against %s success!\n",
                      eps_config.verify_prefix.c_str());
                } else {
                  CkPrintf("[CONTROLLER] Epsilon Matrix verification against %s failed!\n",
                      eps_config.verify_prefix.c_str());
                }
              }
            }
            serial{ STOP_BIG_STEP("EPSILON IO COMPLETED"); }
          }
        }
        when readComplete(bool success) {
          serial {
            if (!success) {
              CkAbort("Failed to read in Epsilon Matrix from file!\n");
            } else {
              matrixCopy(eps_matrix1D_proxy, eps_matrix2D_m_proxy, copyCB);
            }
          }
          when copyComplete(bool success) serial {
            if (!success) {
              CkAbort("Failed to copy Epsilon Matrix to 2D decomposition!\n");
            } else {
              STOP_BIG_STEP("EPSILON READ FROM FILE");
            }
          }
        }
      }

      /************************************************************************/
      /** Phase 3: Invert the Epsilon Matrix **********************************/
      /************************************************************************/
      serial {
        if (!eps_inv_config.read) {
          thisProxy.invertEpsilon();
        } else {
          CkPrintf("[CONTROLLER] Reading Inverted Epsilon Matrix from files %s...\n",
              eps_inv_config.read_prefix.c_str());
          matrixRead(eps_matrix1D_proxy, eps_inv_config.read_prefix, readCB);
          START_STEP("EPSILON INVERSE READ FROM FILE");
        }
      }
      case {
        when EpsilonInverted() {
          if (eps_inv_config.write || eps_inv_config.verify) {
            serial {
              matrixCopy(eps_matrix2D_X_proxy, eps_matrix1D_proxy, copyCB);
              START_STEP("EPSILON INVERSE IO COMPLETED");
            }
            when copyComplete(bool success) {}

            if (eps_inv_config.write) {
              serial {
                matrixWrite(eps_matrix1D_proxy, eps_inv_config.write_prefix, writeCB);
              }
              when writeComplete(bool success) serial {
                if (success) {
                  CkPrintf("[CONTROLLER] Inverted Epsilon Matrix written out to %s\n",
                      eps_inv_config.write_prefix.c_str());
                } else {
                  CkPrintf("[CONTROLLER] Error writing Inverted Epsilon Matrix out to %s\n",
                      eps_inv_config.write_prefix.c_str());
                }
              }
            }
            if (eps_inv_config.verify) {
              serial {
                matrixVerify(eps_matrix1D_proxy, eps_inv_config.verify_prefix, verifyCB);
              }
              when verifyComplete(bool success) serial {
                if (success) {
                  CkPrintf("[CONTROLLER] Inverted Epsilon Matrix verification against %s success!\n",
                      eps_inv_config.verify_prefix.c_str());
                } else {
                  CkPrintf("[CONTROLLER] Inverted Epsilon Matrix verification against %s failed!\n",
                      eps_inv_config.verify_prefix.c_str());
                }
              }
            }
            serial { STOP_BIG_STEP("EPSILON INVERSE IO COMPLETED"); }
          }
        }
        when readComplete(bool success) {
          serial {
            if (!success) {
              CkAbort("Failed to read in Inverted Epsilon Matrix from file!\n");
            } else {
              matrixCopy(eps_matrix1D_proxy, eps_matrix2D_X_proxy, copyCB);
            }
          }
          when copyComplete(bool success) serial {
            if (!success) {
              CkAbort("Failed to copy Inverted Epsilon Matrix to 2D decomposition!\n");
            } else {
              STOP_BIG_STEP("EPSILON INVERSE READ FROM FILE");
            }
          }
        }
      }

      /************************************************************************/
      /** Phase 4 *************************************************************/
      /************************************************************************/
      serial {
        START_STEP("SELF ENERGY COMPUTATIONS COMPLETED");
        eps_matrix2D_X_proxy.createCopy(s_matrix2D_proxy, false);
      }
      when copy_complete() serial {
        s_matrix2D_proxy.multiply_coulb();
      }
      when s_ready() serial {
        CkPrintf("[CONTROLLER] Phase-4 Bare Exchange, Screen Exchange and COH computation\n");
        CkPrintf("| Type               | K | n | n' |     Sigma       \n");
        bare_x = screen_x = coh = (0.0,0.0);
      }

      for (next_K = 0; next_K < K; next_K++) {
//send only occ states
        for (next_state = 0; next_state < Bands ; next_state++) {
          if(np_list[next_state]-1 < L){
            serial {
              states_proxy(0, next_K, np_list[next_state]-1).sendToComputeF();
            }
            when prepare_epsilon() serial { }
          }
        }
      }

      serial{
        eps_matrix2D_X_proxy.bareExchange();
      }

      when bareExchangeComplete(CkReductionMsg* msg) serial {
        CkReduction::tupleElement* results = NULL;
        int num_reductions = 0;
        msg->toTuple(&results, &num_reductions);
        int ik = 0;

        for(int k=0;k<K;k++){
          for(int ib=0;ib<Bands;ib++){
            complex dx = *(complex*)results[ik++].data;
            CkPrintf("-----------------------------------------------------------------\n");
            CkPrintf("| Bare Exchange     | %d | %d | %d | %lf + %fi\t|\n", k, n_list[ib], np_list[ib], dx.re*27.2114,dx.im);
            CkPrintf("|                   |   |   |   |                         \n");
          }
        }
        complex dx = *(complex*)results[ik].data;
        CkPrintf("-----------------------------------------------------------------\n");
        CkPrintf("| Accumulated Bare Exchange     | %d | %d | %d | %lf + %fi\t|\n", 0, 0, 0, dx.re*27.2114,dx.im);
        CkPrintf("|                               |   |   |   |                         \n");
        delete msg;
        s_matrix2D_proxy.screenedExchange();
      }

      when screenedExchangeComplete(CkReductionMsg* msg) serial {
        CkReduction::tupleElement* results = NULL;
        int num_reductions = 0;
        msg->toTuple(&results, &num_reductions);
        int ik = 0;

        for(int k=0;k<K;k++){
          for(int ib=0;ib<Bands;ib++){
            complex dx = *(complex*)results[ik++].data;
            CkPrintf("-----------------------------------------------------------------\n");
            CkPrintf("| Screen Exchange     | %d | %d | %d | %11.8f + %fi\t|\n", k, n_list[ib], np_list[ib], dx.re*27.2114, dx.im);
            CkPrintf("|                     |   |   |   |                         \n");
          }
        }
        complex dx = *(complex*)results[ik].data;
        CkPrintf("-----------------------------------------------------------------\n");
        CkPrintf("| Accumulated Screen Exchange     | %d | %d | %d | %lf + %fi\t|\n", 0, 0, 0, dx.re*27.2114,dx.im);
        CkPrintf("|                                 |   |   |   |                         \n");
        delete msg;
        s_matrix2D_proxy.coh();
      }
      when cohComplete(CkReductionMsg* msg) serial {
        CkReduction::tupleElement* results = NULL;
        int num_reductions = 0;
        msg->toTuple(&results, &num_reductions);
        int ik = 0;
        for(int k=0;k<K;k++){
          for(int ib=0;ib<Bands;ib++){
            complex dx = *(complex*)results[ik++].data;
            CkPrintf("| COH               | %d | %d | %d | %lf + %fi\t|\n", k, n_list[ib], np_list[ib], dx.re, dx.im);
            CkPrintf("|                   |   |   |   |                         \n");
            CkPrintf("-----------------------------------------------------------------\n");
          }
        }
        complex dx = *(complex*)results[ik].data;
        CkPrintf("-----------------------------------------------------------------\n");
        CkPrintf("| Accumulated COH     | %d | %d | %d | %lf + %fi\t|\n", 0, 0, 0, dx.re,dx.im);
        CkPrintf("|                     |   |   |   |                         \n");
        delete msg;
      }

      serial {
        STOP_BIG_STEP("SELF ENERGY COMPUTATIONS COMPLETED");
        CkExit();
      }
    }

    entry void formPMatrix() {
      // Send a message to each unoccupied state, telling them to broadcast to
      // all PsiCaches. When a PsiCache receives an unoccupied state, it
      // uses its local copies of the occupied states to compute all the f
      // vectors for the unoccupied state it just received, which will then be
      // used to update the P matrix by adding the outer-product of each f.
      serial {
        START_STEP("P MATRIX FORMED");
        START_STEP("P Matrix formed in real space");
      }
      for (next_K = 0; next_K < K && total_sent < max_sends; next_K++) {
        for (next_state = L; next_state < L + M && total_sent < max_sends; next_state++) {
          serial {
            states_proxy(0, next_K, next_state).sendToComputeF();
            total_sent++;
          }
          // This constrains us to only sending out 'pipeline_stages' number of
          // states at a time. As the PsiCaches complete work on the states, we
          // can send more.
          if (total_sent >= pipeline_stages) {
            when psiComplete() serial {
              if (++total_complete >= next_report_threshold) {
                CkPrintf("[CONTROLLER] P formation %3i%% complete @%.2f\n",
                    total_complete*100 / max_sends, CmiWallTimer());
                next_report_threshold = total_complete + max_sends/10;
              }
            }
          }
        }
      }
      // Wait for the PsiCaches to finish up with the remaining unoccupied
      // states.
      while (total_complete < max_sends) {
        when psiComplete() serial {
          if (++total_complete >= next_report_threshold) {
            CkPrintf("[CONTROLLER] P formation %3i%% complete @%.2f\n",
                total_complete*100 / max_sends, CmiWallTimer());
            next_report_threshold = total_complete + max_sends/10;
          }
        }
      }

      // Phase 1 is complete, so get more detailed timing info from the P Matrix
      // chares and the PsiCache chares.
      serial {
        STOP_STEP("P Matrix formed in real space");
        pmatrix2D_proxy.reportPTime();
        psi_cache_proxy.reportFTime();
      }

      overlap {
        when reportPTime(CkReductionMsg* msg) serial {
          CkReduction::tupleElement* results = NULL;
          int num_reductions = 0;
          msg->toTuple(&results, &num_reductions);

          double total_pcomp = *(double*)results[0].data;
          CkReduction::statisticsElement& stats_result = *(CkReduction::statisticsElement*)results[1].data;
          int pcomp_count = stats_result.count;
          double avg_pcomp = stats_result.mean;

          CkPrintf("\n[CONTROLLER] --- DETAILED P FORMATION TIMING ---\n");
          CkPrintf("[CONTROLLER] Aggregate P (total across %i chares):                 \t%.2fs\n",
              pcomp_count, total_pcomp);
          CkPrintf("[CONTROLLER] Aggregate P (avg across %i chares):                   \t%.2fs\n",
              pcomp_count, avg_pcomp);
          CkPrintf("[CONTROLLER] Aggregate P (avg per PE assuming %0.2f chares per PE):\t%.2fs\n",
              ((double)pcomp_count/CkNumPes()),
              avg_pcomp * ((double)pcomp_count/CkNumPes()));
          CkPrintf("[CONTROLLER] -----------------------------------\n\n");
          delete msg;
        }
        when reportFTime(CkReductionMsg* msg) serial {
          CkReduction::tupleElement* results = NULL;
          int num_reductions = 0;
          msg->toTuple(&results, &num_reductions);

          double max_fcomp = *(double*)results[0].data;
          CkReduction::statisticsElement& stats_result = *(CkReduction::statisticsElement*)results[1].data;
          int fcomp_count = stats_result.count;
          double avg_fcomp = stats_result.mean;
          CkPrintf("\n[CONTROLLER] --- DETAILED F FORMATION TIMING ---\n");
          CkPrintf("[CONTROLLER] Compute fs (max across %i nodes):                     \t%.2fs\n",
              fcomp_count, max_fcomp);
          CkPrintf("[CONTROLLER] Compute fs (avg across %i nodes):                     \t%.2fs\n",
              fcomp_count, avg_fcomp);
          CkPrintf("[CONTROLLER] -----------------------------------\n\n");
          delete msg;
        }
      }

      // At this point, all unoccupied states have been sent and processed, so
      // P is completely formed in R space. Now we can FFT it to G space. First
      // we switch from a 2D decomposition to a 1D decomposition, so that FFT
      // calls can be done with fftw calls.
      serial {
        START_STEP("P Matrix formed in G space");
        matrixCopy(pmatrix2D_proxy, pmatrix1D_proxy, copyCB);
      }

      // When we receive this message, we know that P has switched to a 1D
      // decomposition, so tell it to FFT all of it's rows.
      when copyComplete(bool success) serial{
        START_STEP("1st FFT completed");
        pmatrix1D_proxy.fftRows(1);
      }

      // The FFT of the rows is complete, so now transpose the matrix.
      when fftComplete() serial{
        STOP_STEP("1st FFT completed");
        START_STEP("1st Transpose completed");
        pmatrix1D_proxy.start_iteration();
        pmatrix1D_proxy.doTranspose();
      }

      // Transpose is complete, so FFT the rows again in the opposite direction.
      when transposeComplete() serial{
        STOP_STEP("1st Transpose completed");
        START_STEP("2nd FFT completed");
        pmatrix1D_proxy.fftRows(-1);
      }

      // The second FFT is complete, so transpose back.
      when fftComplete() serial{
        STOP_STEP("2nd FFT completed");
        START_STEP("2nd Transpose completed");
        pmatrix1D_proxy.start_iteration();
        pmatrix1D_proxy.doTranspose();
      }

      // The final transpose is complete so now switch back to the 2D decomp.
      when transposeComplete() serial{
        STOP_STEP("2nd Transpose completed");
        STOP_STEP("P Matrix formed in G space");
        STOP_BIG_STEP("P MATRIX FORMED");
        thisProxy.PMatrixFormed();
      }
    }

    entry void formEpsilon() {
      serial {
        START_STEP("EPSILON FORMED");
        START_STEP("Epsilon computation prepared");
        calc_Geps();
      }

      when prepare_epsilon() serial{
        STOP_STEP("Epsilon computation prepared");
        START_STEP("Matrix multiply prepared");
#if USE_CLA
        mat_mul_proxy.setup(matA, matB, matC,
            eps_matrix2D_m_proxy, eps_matrix2D_mT_proxy, eps_matrix2D_X_proxy,
            padded_epsilon_size, eps_rows);
      }

      when matrixReady() serial {
#endif
        STOP_STEP("Matrix multiply prepared");
        START_STEP("Epsilon generated");
        pmatrix1D_proxy.generateEpsilon(eps_matrix2D_m_proxy, accept_result);
      }
      when epsilon_created() serial {
        STOP_STEP("Epsilon generated");
        STOP_BIG_STEP("EPSILON FORMED");
        thisProxy.EpsilonFormed();
      }
    }

    entry void invertEpsilon() {
      serial {
        START_STEP("EPSILON INVERTED");
        START_STEP("Matrix inversion prepared");
        eps_matrix2D_m_proxy.createTranspose(eps_matrix2D_mT_proxy, false);
      }
      when transpose_complete() serial {
        //X = m*m^T
        mat_mul_proxy.do_multiply(eps_matrix2D_m_proxy, eps_matrix2D_mT_proxy, eps_matrix2D_X_proxy, 1.0);
      }
      when m_multiplied() serial{
        matrixCopy(eps_matrix2D_X_proxy, eps_matrix1D_proxy, copyCB);
      }
      when copyComplete(bool success) serial{
        //find alpha
        eps_matrix1D_proxy.findAlpha();
      }
      when found_alpha(double alpha) serial{
        eps_matrix2D_m_proxy.scalar_multiply(1/alpha);
      }

      // X = eps_matrix2D_proxy
      // assign A = eps->m (warning!! A is column major)
      when scalar_multiplied() serial{
        eps_matrix2D_m_proxy.createConjugate(eps_matrix2D_X_proxy);
      }
      when conjugateComplete() serial{
        STOP_STEP("Matrix inversion prepared");
        START_STEP("Iterative inverse completed");
        resultInsert = true;
        eps_matrix2D_mT_proxy.createTranspose(eps_matrix2D_A_proxy, false);//Dummy call
        //Result A - eps_matrix2D_bproxy
      }

      for(iteration=0; iteration<maxiter; iteration++) {
        // Step 1: M1 = 2I - A * X

        when transpose_complete() serial {
          // Step 1-(a) : M1 = -A * X
#if USE_CLA
          mat_mul_proxy.setup(matA2, matB2, matC2,
              eps_matrix2D_X_proxy, eps_matrix2D_A_proxy, eps_matrix2D_M1_proxy,
              padded_epsilon_size, eps_rows);
          //some more transpose needs to be done before calling the iterative
          // matrix multiplication
        }
        when matrixReady() serial {
#endif
          if(iteration%percent==0)
            CkPrintf("[CONTROLLER] Matrix Setup done\n");
          mat_mul_proxy.do_multiply(
              eps_matrix2D_X_proxy,
              eps_matrix2D_A_proxy,
              eps_matrix2D_M1_proxy, -1.0);
        }
        when m_multiplied() serial {

          // Step 1-(b) : M1 = 2I-M1
		      if(iteration%percent==0)
			      CkPrintf("[CONTROLLER] Multiplied Matrices - Step 1-(a) : M1 = -A * X\n");
          eps_matrix2D_M1_proxy.add_compl_two();
        }
        // Step 2: X1 = X * M1
        when complement_multiplied() serial {
          if (iteration%percent==0)
            CkPrintf("[CONTROLLER] Step 1-(b) : M1 = 2I-M1\n");
          // Result X1 - eps_matrix2D_X1_proxy
#if USE_CLA
          mat_mul_proxy.setup(matA3, matB3, matC3,
              eps_matrix2D_M1_proxy, eps_matrix2D_X_proxy, eps_matrix2D_X1_proxy,
              padded_epsilon_size, eps_rows);
        }

        when matrixReady() serial {
#endif
          if (iteration%percent==0)
            CkPrintf("[CONTROLLER] Matrix Setup done\n");
          mat_mul_proxy.do_multiply(
              eps_matrix2D_M1_proxy,
              eps_matrix2D_X_proxy,
              eps_matrix2D_X1_proxy, 1.0);
        }

        // X = X1
        when m_multiplied() serial {
          if(iteration%percent==0)
            CkPrintf("[CONTROLLER] Multiplied Matrices - Step 2: X1 = X * M1\n");
          if(iteration%percent==0)
            CkPrintf("[CONTROLLER] Calling convergence\n");
          eps_matrix2D_X1_proxy.convergence_check(eps_matrix2D_X_proxy);
        }

        when converge_results(double max) serial {
          double diff = (prev_max-max > 0) ? prev_max-max : (prev_max-max)*-1;
          if (diff < tol_iter_mtxinv) {
            // int(prev_max*100000) == (int)(max*100000))
            CkPrintf("[CONTROLLER] Converged at iteration %d\n", iteration);
            iteration = maxiter;
          } else {
            if(iteration == maxiter-1)
              CkPrintf("\n[CONTROLLER] Maximum iterations (%d) used.\
              \n\t\tEpsilon matrix inversion was not converged at diff = %lf\n\n", maxiter, diff);
          }
          prev_max = max;
          matrixCopy(eps_matrix2D_X1_proxy, eps_matrix2D_X_proxy, copyCB);
        }
        when copyComplete(bool success) serial {
          thisProxy.transpose_complete();
        }
      } //end of for loop

      serial {
        STOP_STEP("Iterative inverse completed");
        STOP_BIG_STEP("EPSILON INVERTED");
        thisProxy.EpsilonInverted();
      }
    }
  };
};
