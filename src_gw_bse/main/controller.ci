
module controller {
  include "matrix.h";
  extern module psi_cache;
  extern module eps_matrix;
  extern module matrix;
  extern module pmatrix;
  extern module mat_mul;
  extern module main;
  readonly CProxy_Controller controller_proxy;

#define percent 25
#define MAX_ITERATIONS 100
#define REGISTER_REGIONS

#define STEP_START(x)\
  timers.x = CmiWallTimer();

#define STEP_END(x,s)\
  double step_now = CmiWallTimer();\
  timers.x = step_now - timers.x;\
  CkPrintf("[CONTROLLER] %-40s @%.2fs (%.2fs elapsed)\n", s, step_now, timers.x);

#define STEP_BOUNDARY(x,y,s)\
  double step_now = CmiWallTimer();\
  timers.x = step_now - timers.x;\
  timers.y = step_now;\
  CkPrintf("[CONTROLLER] %-40s @%.2fs (%.2fs elapsed)\n", s, step_now, timers.x);

#define PHASE_BOUNDARY(x,y,s)\
  double phase_now = CmiWallTimer();\
  timers.x = phase_now - timers.x;\
  timers.y = phase_now;\
  CkPrintf("[CONTROLLER] ====================================================================\n");\
  CkPrintf("[CONTROLLER] ==== %-35s @%.2fs (%.2fs elapsed)\n", s, phase_now, timers.x);\
  CkPrintf("[CONTROLLER] ====================================================================\n");

  // Describes and controls the main control flow of the entire computation, by
  // by coordinating communication between all other chares in the system.
  chare Controller {
    entry Controller();

    // reductions used for control flow
    entry void matricesReady();
    entry void matrixReady();
    entry void computeEpsDimensions();
    entry void calc_Geps();
    entry [reductiontarget] void created1d_complete();
    entry void receiveEpsDimensions(std::vector<int> accept, std::vector<int>
                                    geps_x,std::vector<int> geps_y,
                                    std::vector<int> geps_z, int epsilon_size);
    entry void got_vcoulb(std::vector<double> vcoulb);
    entry [reductiontarget] void fftControllerReady();
    entry [reductiontarget] void psiCacheReady();
    entry [reductiontarget] void fCacheReady();
    entry [reductiontarget] void cachesFilled();
    entry [reductiontarget] void registrationComplete();
    entry [reductiontarget] void psiComplete();
    entry [reductiontarget] void fftComplete();
    entry [reductiontarget] void transposeComplete();
    entry [reductiontarget] void copyComplete();
    entry [reductiontarget] void transpose_complete();
    entry [reductiontarget] void copy_complete();
    entry [reductiontarget] void matrix_created();
    entry [reductiontarget] void m_multiplied();
    entry [reductiontarget] void conjugateComplete();
    entry [reductiontarget] void complement_multiplied();
    entry [reductiontarget] void found_alpha(double alpha);
    entry [reductiontarget] void scalar_multiplied();
    entry [reductiontarget] void converge_results(double max);
    entry [reductiontarget] void prepare_epsilon();
    entry [reductiontarget] void epsilon_created();
    entry [reductiontarget] void bareExchangeComplete(complex x);
    entry [reductiontarget] void screenedExchangeComplete(complex x);
    entry [reductiontarget] void cohComplete(complex x);
    entry [reductiontarget] void finished_copy();
    entry [reductiontarget] void s_ready();

#if defined(VERIFY_P) || defined(VERIFY_EPS) || defined(VERIFY_EPS_INV)
    entry [reductiontarget] void verifyComplete();
#endif

    entry void reportFTime(CkReductionMsg*);
    entry void reportPTime(CkReductionMsg*);

    entry [reductiontarget] void iterationComplete(){
      serial{
        pmatrix1D_proxy.start_iteration();
      }
    }
    // Main control flow
    entry void run() {
      when fftControllerReady() serial {
        //precompute epsilon dimensions to enable caching necessary subsets of f-vectors
        computeEpsDimensions();
      }
      when receiveEpsDimensions(std::vector<int> accept, std::vector<int>
                                geps_x,std::vector<int> geps_y, std::vector<int> geps_z,int epsilon_size)
      serial{
        accept_result = accept;
        PAD(epsilon_size);
        fvector_cache_proxy.setDim(padded_epsilon_size/eps_rows,
                                    accept,geps_x,geps_y,geps_z);
        states_proxy.fftGtoR();
      }
      when fftComplete(), psiCacheReady() serial {
        #ifdef REGISTER_REGIONS
        pmatrix2D_proxy.registerTileSections();
        #endif
        for (next_K = 0; next_K < K; next_K++) {
          for (next_state = 0; next_state < L; next_state++) {
            states_proxy(0, next_K, next_state).sendToCache();
          }
        }
      }
      when fCacheReady(), cachesFilled(), registrationComplete() serial {
        psi_cache_proxy.reportInfo();
        PHASE_BOUNDARY(total_setup, total_phase1, "SETUP COMPLETE");
      }

      // Send a message to each unoccupied state, telling them to broadcast to
      // all PsiCaches. When a PsiCache receives an unoccupied state, it
      // uses its local copies of the occupied states to compute all the f
      // vectors for the unoccupied state it just received, which will then be
      // used to update the P matrix by adding the outer-product of each f.
      for (next_K = 0; next_K < K && total_sent < max_sends; next_K++) {
        for (next_state = L; next_state < L + M && total_sent < max_sends; next_state++) {
          serial {
            states_proxy(0, next_K, next_state).sendToComputeF();
            total_sent++;
          }
          // This constrains us to only sending out 'pipeline_stages' number of
          // states at a time. As the PsiCaches complete work on the states, we
          // can send more.
          if (total_sent >= pipeline_stages) {
            when psiComplete() serial {
              if (++total_complete >= next_report_threshold) {
                CkPrintf("[CONTROLLER] P formation %3i%% complete @%.2f\n",
                    total_complete*100 / max_sends, CmiWallTimer());
                next_report_threshold = total_complete + max_sends/10;
              }
            }
          }
        }
      }
      // Wait for the PsiCaches to finish up with the remaining unoccupied
      // states.
      while (total_complete < max_sends) {
        when psiComplete() serial {
          if (++total_complete >= next_report_threshold) {
            CkPrintf("[CONTROLLER] P formation %3i%% complete @%.2f\n",
                total_complete*100 / max_sends, CmiWallTimer());
            next_report_threshold = total_complete + max_sends/10;
          }
        }
      }

      // Phase 1 is complete, so get more detailed timing info from the P Matrix
      // chares and the PsiCache chares.
      serial {
        STEP_BOUNDARY(form_p, get_times, "P formed in R Space");
        pmatrix2D_proxy.reportPTime();
        psi_cache_proxy.reportFTime();
      }

      overlap {
        when reportPTime(CkReductionMsg* msg) serial {
          CkReduction::tupleElement* results = NULL;
          int num_reductions = 0;
          msg->toTuple(&results, &num_reductions);

          timers.total_pcomp = *(double*)results[0].data;
          CkReduction::statisticsElement& stats_result = *(CkReduction::statisticsElement*)results[1].data;
          timers.pcomp_count = stats_result.count;
          timers.avg_pcomp = stats_result.mean;
          delete msg;
        }
        when reportFTime(CkReductionMsg* msg) serial {
          CkReduction::tupleElement* results = NULL;
          int num_reductions = 0;
          msg->toTuple(&results, &num_reductions);

          timers.max_fcomp = *(double*)results[0].data;
          CkReduction::statisticsElement& stats_result = *(CkReduction::statisticsElement*)results[1].data;
          timers.fcomp_count = stats_result.count;
          timers.avg_fcomp = stats_result.mean;
          delete msg;
        }
      }

      // At this point, all unoccupied states have been sent and processed, so
      // P is completely formed in R space. Now we can FFT it to G space. First
      // we switch from a 2D decomposition to a 1D decomposition, so that FFT
      // calls can be done with fftw calls.
      serial {
        STEP_BOUNDARY(get_times, to1D, "Detailed times received");

        CkPrintf("[CONTROLLER] Compute fs (max across %i nodes):                     \t%.2fs\n",
            timers.fcomp_count, timers.max_fcomp);
        CkPrintf("[CONTROLLER] Compute fs (avg across %i nodes):                     \t%.2fs\n",
            timers.fcomp_count, timers.avg_fcomp);

        CkPrintf("[CONTROLLER] Aggregate P (total across %i chares):                 \t%.2fs\n",
            timers.pcomp_count, timers.total_pcomp);
        CkPrintf("[CONTROLLER] Aggregate P (avg across %i chares):                   \t%.2fs\n",
            timers.pcomp_count, timers.avg_pcomp);
        CkPrintf("[CONTROLLER] Aggregate P (avg per PE assuming %0.2f chares per PE):\t%.2fs\n",
            ((double)timers.pcomp_count/CkNumPes()),
            timers.avg_pcomp * ((double)timers.pcomp_count/CkNumPes()));

        PHASE_BOUNDARY(total_phase1, total_phase2, "PHASE 1 (P in R Space) COMPLETE");
        CkCallback cb(CkReductionTarget(Controller, copyComplete), thisProxy);
        matrixCopy(pmatrix2D_proxy, pmatrix1D_proxy, cb);
      }

      // When we receive this message, we know that P has switched to a 1D
      // decomposition, so tell it to FFT all of it's rows.
      when copyComplete() serial{
        STEP_BOUNDARY(to1D, fft1, "Matrix decomposition changed to 1D");
        pmatrix1D_proxy.fftRows(1);
      }

      // The FFT of the rows is complete, so now transpose the matrix.
      when fftComplete() serial{
        STEP_BOUNDARY(fft1, trans1, "First FFT complete");
        pmatrix1D_proxy.start_iteration();
        pmatrix1D_proxy.doTranspose();
      }

      // Transpose is complete, so FFT the rows again in the opposite direction.
      when transposeComplete() serial{
        STEP_BOUNDARY(trans1, fft2, "First transpose complete");
        pmatrix1D_proxy.fftRows(-1);
      }

      // The second FFT is complete, so transpose back.
      when fftComplete() serial{
        STEP_BOUNDARY(fft2, trans2, "Second fft complete");
        pmatrix1D_proxy.start_iteration();
        pmatrix1D_proxy.doTranspose();
      }

      // The final transpose is complete so now switch back to the 2D decomp.
      when transposeComplete() serial{
        STEP_BOUNDARY(trans2, to2D, "Second transpose complete");
      }

#ifdef VERIFY_P
      serial {
        CkCallback cb(CkReductionTarget(Controller, verifyComplete), thisProxy);
        matrixVerify(pmatrix1D_proxy, "serial_output/PMatrix", cb);
      }
      when verifyComplete() serial { CkPrintf("[CONTROLLER] Matrix Verified\n"); }
#endif

      // Start phase 3 by figuring out epsilon size and creating the matrices
      serial {
        PHASE_BOUNDARY(total_phase2, total_phase3, "PHASE 2 (FFT P) COMPLETE");
        calc_Geps();
      }
      when prepare_epsilon() serial {
        MatrixConfig cfg2D;
        cfg2D.mat_rows = cfg2D.mat_cols = padded_epsilon_size;
        cfg2D.tile_rows = eps_rows;
        cfg2D.tile_cols = eps_cols;

        CProxy_EpsMap map = CProxy_EpsMap::ckNew(cfg2D);
        CkArrayOptions opts(cfg2D.chareRows(), cfg2D.chareCols());
        opts.setMap(map);

        eps_matrix2D_m_proxy = CProxy_EpsMatrix::ckNew(
            cfg2D, opts);
        eps_matrix2D_mT_proxy = CProxy_EpsMatrix::ckNew(
            cfg2D, opts);
        eps_matrix2D_X_proxy = CProxy_EpsMatrix::ckNew(
            cfg2D, opts);
        eps_matrix2D_A_proxy = CProxy_EpsMatrix::ckNew(
            cfg2D, opts);
        eps_matrix2D_M1_proxy = CProxy_EpsMatrix::ckNew(
            cfg2D, opts);
        eps_matrix2D_X1_proxy = CProxy_EpsMatrix::ckNew(
            cfg2D, opts);

        s_matrix2D_proxy = CProxy_EpsMatrix::ckNew(
            cfg2D, opts);

        MatrixConfig cfg1D = convertTo1D(cfg2D, eps_rows);
        eps_matrix1D_proxy = CProxy_EpsMatrix::ckNew(
            cfg1D, cfg1D.chareRows(), cfg1D.chareCols());
      }

      when matricesReady() serial{
        mat_mul_proxy.setup(matA, matB, matC,
            eps_matrix2D_m_proxy, eps_matrix2D_mT_proxy, eps_matrix2D_X_proxy,
            padded_epsilon_size, eps_rows);
      }

      when matrixReady() serial {
        CkPrintf("[CONTROLLER] 2D Matrices are ready\n");
        pmatrix1D_proxy.generateEpsilon(eps_matrix2D_m_proxy, accept_result);
      }
      when epsilon_created() serial {
        CkPrintf("[CONTROLLER] Created Epsilon Matrix\n");
      }

#ifdef VERIFY_EPS
      serial {
        CkCallback cb(CkReductionTarget(Controller, copyComplete), thisProxy);
        matrixCopy(eps_matrix2D_m_proxy, eps_matrix1D_proxy, cb);
      }
      when copyComplete() serial {
        CkCallback cb(CkReductionTarget(Controller, verifyComplete), thisProxy);
        matrixVerify(eps_matrix1D_proxy, "serial_output/Eps_0", cb);
      }
      when verifyComplete() serial { CkPrintf("[CONTROLLER] Matrix Verified\n"); }
#endif

      serial { eps_matrix2D_m_proxy.createTranspose(eps_matrix2D_mT_proxy, false); }
      when transpose_complete() serial {
        CkPrintf("[CONTROLLER] Created Transpose\n");
        //X = m*m^T
        mat_mul_proxy.do_multiply(eps_matrix2D_m_proxy, eps_matrix2D_mT_proxy, eps_matrix2D_X_proxy, 1.0);
      }
      when m_multiplied() serial{
        CkPrintf("[CONTROLLER] Multiply completed\n");
        CkCallback cb(CkReductionTarget(Controller, created1d_complete), thisProxy);
        matrixCopy(eps_matrix2D_X_proxy, eps_matrix1D_proxy, cb);
      }
      when created1d_complete() serial{
        //find alpha
        CkPrintf("[CONTROLLER] Multiplied Matrices X = m*m^T\n");
        eps_matrix1D_proxy.findAlpha();
      }
      when found_alpha(double alpha) serial{
        CkPrintf("[CONTROLLER] Computed alpha\n");
        eps_matrix2D_m_proxy.scalar_multiply(1/alpha);
      }

      // X = eps_matrix2D_proxy
      // assign A = eps->m (warning!! A is column major)
      when scalar_multiplied() serial{
        eps_matrix2D_m_proxy.createConjugate(eps_matrix2D_X_proxy);
      }
      when conjugateComplete() serial{
        resultInsert = true;
        eps_matrix2D_mT_proxy.createTranspose(eps_matrix2D_A_proxy, false);//Dummy call
        //Result A - eps_matrix2D_bproxy
      }

      for(iteration=0; iteration<MAX_ITERATIONS; iteration++) {
        // Step 1: M1 = 2I - A * X

        when transpose_complete() serial {
          // Step 1-(a) : M1 = -A * X
          mat_mul_proxy.setup(matA2, matB2, matC2,
              eps_matrix2D_X_proxy, eps_matrix2D_A_proxy, eps_matrix2D_M1_proxy,
              padded_epsilon_size, eps_rows);
          //some more transpose needs to be done before calling the iterative
          // matrix multiplication
        }
        when matrixReady() serial {
          if(iteration%percent==0)
          CkPrintf("[CONTROLLER] Matrix Setup done\n");
          mat_mul_proxy.do_multiply(
              eps_matrix2D_X_proxy,
              eps_matrix2D_A_proxy,
              eps_matrix2D_M1_proxy, -1.0);
        }
        when m_multiplied() serial {

          // Step 1-(b) : M1 = 2I-M1
		      if(iteration%percent==0)
			      CkPrintf("[CONTROLLER] Multiplied Matrices - Step 1-(a) : M1 = -A * X\n");
          eps_matrix2D_M1_proxy.add_compl_two();
        }
        // Step 2: X1 = X * M1
        when complement_multiplied() serial {
          if (iteration%percent==0)
            CkPrintf("[CONTROLLER] Step 1-(b) : M1 = 2I-M1\n");
          // Result X1 - eps_matrix2D_X1_proxy
          mat_mul_proxy.setup(matA3, matB3, matC3,
              eps_matrix2D_M1_proxy, eps_matrix2D_X_proxy, eps_matrix2D_X1_proxy,
              padded_epsilon_size, eps_rows);
        }

        when matrixReady() serial {
          if (iteration%percent==0)
            CkPrintf("[CONTROLLER] Matrix Setup done\n");
          mat_mul_proxy.do_multiply(
              eps_matrix2D_M1_proxy,
              eps_matrix2D_X_proxy,
              eps_matrix2D_X1_proxy, 1.0);
        }

        // X = X1
        when m_multiplied() serial {
          if(iteration%percent==0)
            CkPrintf("\n[CONTROLLER] Multiplied Matrices - Step 2: X1 = X * M1");
          if(iteration%percent==0)
            CkPrintf("\n[CONTROLLER] Calling convergence\n");
          eps_matrix2D_X1_proxy.convergence_check(eps_matrix2D_X_proxy);
        }

        when converge_results(double max) serial {
          double diff = (prev_max-max > 0) ? prev_max-max : (prev_max-max)*-1;
          if (diff < 0.00001) {
            // int(prev_max*100000) == (int)(max*100000))
            CkPrintf("\nConverged at iteration %d\n", iteration);
            iteration = MAX_ITERATIONS;
          }
          prev_max = max;
          CkCallback cb(CkReductionTarget(Controller, finished_copy), thisProxy);
          matrixCopy(eps_matrix2D_X1_proxy, eps_matrix2D_X_proxy, cb);
        }
        when finished_copy() serial {
          thisProxy.transpose_complete();
        }
      } //end of for loop

      serial {
	      PHASE_BOUNDARY(total_phase3, total_phase4, "PHASE 3 (Epsilon Matrix Inversion) COMPLETE");
      }

#ifdef VERIFY_EPS_INV
      serial {
        CkCallback cb(CkReductionTarget(Controller, copyComplete), thisProxy);
        matrixCopy(eps_matrix2D_X_proxy, eps_matrix1D_proxy, cb);
      }
      when copyComplete() serial {
        CkCallback cb(CkReductionTarget(Controller, verifyComplete), thisProxy);
        matrixVerify(eps_matrix1D_proxy, "serial_output/Eps_inv_0", cb);
      }
      when verifyComplete() serial { CkPrintf("[CONTROLLER] Matrix Verified\n"); }
#endif

      serial {
        eps_matrix2D_X_proxy.createCopy(s_matrix2D_proxy, false);
      }

      when copy_complete() serial {
        s_matrix2D_proxy.multiply_coulb();
      }

      when s_ready() serial {
        eps_matrix2D_X_proxy.bareExchange();
        s_matrix2D_proxy.screenedExchange();
        s_matrix2D_proxy.coh();
      }
      overlap {
        when bareExchangeComplete(complex x) serial {
          CkPrintf("Bare Exchange complete: %11.8lf + %fi\n", x.re, x.im);
        }
        when screenedExchangeComplete(complex x) serial {
          CkPrintf("Screened Exchange complete: %f + %fi\n", x.re, x.im);
        }
        when cohComplete(complex x) serial{
          CkPrintf("COH complete: %lf + %lfi\n", x.re, x.im);
        }
      }
      serial { CkExit(); }
    }
  };
};
