module eps_matrix {
  include "ckcomplex.h";
  include "CLA_Matrix.h";
  
  extern module matrix;
  extern module messages;

  array [2D] EpsMatrix : Matrix {
    entry EpsMatrix();
    entry EpsMatrix(MatrixConfig config);
    entry void createTranspose(CProxy_EpsMatrix other, bool todo);
    entry void createConjugate(CProxy_EpsMatrix other);
    entry void receiveTranspose(std::vector<complex> incoming);
    entry void receiveConjugate(std::vector<complex> incoming);
    entry void multiply(double alpha, double beta);
    entry void round_done();
    entry void scalar_multiply(double alpha);
    entry void add_compl_two();
    entry void convergence_check(CProxy_EpsMatrix cmp_proxy);
    entry void receiveConvCheck(std::vector<complex> incoming);
    entry void setI(CLA_Matrix_interface mat, bool clean);
    entry void receiveFs(Phase3Message*);
    entry void bareExchange();
    entry void screenedExchange();
    entry void coh();
    entry void findAlpha();
    entry void multiply_coulb();
    entry void createCopy(CProxy_EpsMatrix other, bool todo);
    entry void recvCopy(std::vector<complex> new_data);

    entry void pdgemmSendInput(CProxy_EpsMatrix output, bool aOrB) {
      serial {
        if (aOrB)
          output((thisIndex.x-thisIndex.y+numBlocks)%numBlocks, thisIndex.y).inputA(0, data, blockSize, blockSize);
        else
          output(thisIndex.x, (thisIndex.y-thisIndex.x+numBlocks)%numBlocks).inputB(0, data, blockSize, blockSize);
      }
    };

    entry void pdgemmRun(double alpha, CkCallback done) {
      forall [block] (0:numBlocks-1,1) {
        when
          inputA[block](int blockIdA, complex blockA[M*KA], unsigned int M, unsigned int KA),
          inputB[block](int blockIdB, complex blockB[KB*N], unsigned int KB, unsigned int N)
          serial {
          CkAssert(KA == KB);

          // This DGEMM makes no attempt at optimization. For
          // benchmarking, it should be replaced with a library
          // call. The local version is kept for easy portability.
          example_dgemm(M, N, KA,
                        alpha,
                        blockA, blockB, data);
          if (blockIdA != numBlocks) {
            int destX = (thisIndex.x + 1) % numBlocks;
            int destY = thisIndex.y;
            thisProxy(destX, destY).inputA(blockIdA+1, blockA, M, KA);
          }
          if (blockIdB != numBlocks) {
            int destX = thisIndex.x;
            int destY = (thisIndex.y + 1) % numBlocks;
            thisProxy(destX, destY).inputB(blockIdB+1, blockB, KB, N);
          }
        }
      }
      serial {
        contribute(done);
      }
    };
    entry void inputA(int blockIdA, complex blockA[M*KA], unsigned int M, unsigned int KA);
    entry void inputB(int blockIdB, complex blockB[KB*N], unsigned int KB, unsigned int N);
  };
};
