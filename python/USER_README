1) Extra Installation:
  1.1 Download the lateset version of PyYAML from http://pyyaml.org/wiki/PyYAML
  1.2 Install PyYAML by using command 'python setup.py install'. If you want to
      use arbitrary install path instead of default one, please use command
      'python setup.py install --home=PATH' and then use command
      'export PYTHONPATH = PATH/lib/python'.

2) Test structure:
  2.1 Data set must contain a 'tests' directory. Inside of the 'tests' directory
      there should be a directory for each set of tests, ie: regression,
      multi-core, scaling.
  2.2 Each test directory needs 3 things: OpenAtom configuration files,
      output reference files, and a test script. The format of the output
      references and the test script will be described later.

3) Running the framework:
  3.1 From the python directory, run
      'python test_driver.py <dataset_path> <exe_path> <test_name>'. This
      will run the tests described by the test script in
      <dataset_path>/tests/<test_name> on the exe in <exe_path>
  3.2 Alternatively, multiple tests can be specified in a single file and ran by
      'python test_driver.py <config_file>. Each line in this file should be
      <dataset_path> <exe_path> <test_name>. These tests will be run as if you
      ran them using the command in 3.1, except results from all runs will be
      summarized together.
  3.3 TODO: For now, datasets must be located in the data directory of the
      openatom base directory

4) Test Script:
  4.1 The header of the test script begins with '- config:'. Under this config
      header is where the top level settings for all tests described by this
      file go. Any of these setting can be overridden in the entries for
      specific tests.
    4.1.1 TODO: Right now sig_figs, and iteration can only go here, and will
          be ignored if they are part of specific tests.
  4.2 After the header, there will be an entry for each test, beginning with
      '- name: <test_name>'. On the following lines, test specifics will be
      described. These include 'variants', 'numpe', 'desc', 'par_cfg',
      'phy_cfg', and 'out_ref'.
    4.2.1 Variants and numpe are lists of the form [x,y,z]. Each entry in the
          list specifies a specific run, and runs will be done for every
          (variant, numpe) pair. The variables $V, $P can be used elsewhere in
          the test script and will be filled in with variants and numpes at the
          time the test is run.
    4.2.2 The remaining entries are for description, parallel config file name,
          physics config file name, and output reference filename.
  4.3 A good example test script with all of the above functionality can be
      found in the water_32M_10Ry regression test.

5) Output reference:
  5.1 An output reference file is a stripped down version of the output from a
      single iteration. Examples can be found in the water_32M_10Ry regression
      test.
