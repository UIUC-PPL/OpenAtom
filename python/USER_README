1) Extra Installation:
  1.1 Download the lateset version of PyYAML from http://pyyaml.org/wiki/PyYAML
  1.2 Install PyYAML by using command 'python setup.py install'. If you want to
      use arbitrary install path instead of default one, please use command
      'python setup.py install --home=PATH' and then use command
      'export PYTHONPATH = PATH/lib/python'.

2) Test structure:
  2.1 Data set must contain a 'tests' directory. Inside of the 'tests' directory
      there should be a directory for each set of tests, ie: regression,
      multi-core, scaling.
  2.2 Each test directory needs 3 things: OpenAtom configuration files,
      output reference files, and a test script. The format of the output
      references and the test script will be described later.

3) Running the framework:
  3.1 From the python directory, run
      'python config_parser.py <dataset_path> <exe_path> <test_name>'. This
      will run the tests described by the test script in
      <dataset_path>/tests/<test_name>
  3.2 TODO: You can also supply a single command line argument with a file
      that lists a set of tests to run
  3.3 TODO: For now, datasets must be located in the data directory of the
      openatom base directory

4) Test Script:
  4.1 The header of the test script begins with '- config:'. Under this config
      header is where the top level settings for all tests described by this
      file go.
    4.1.1 TODO: Right now, the only entries here are sig_figs and iteration.
          sig_figs are the number of sig_figs used in number comparison, and
          iteration is the iteration that should be compared against the output
          reference. Generally iteration is the last iteration.
    4.1.2 TODO: These settings should be generally considered defaults that
          should be able to be overridden by specific tests.
  4.2 After the header, there will be an entry for each test, beginning with
      '- name: <test_name>'. On the following lines, test specifics will be
      described. These include 'variants', 'numpe', 'desc', 'par_cfg',
      'phy_cfg', and 'out_ref'.
    4.2.1 Variants and numpe are lists of the form [x,y,z]. Each entry in the
          list specifies a specific run, and runs will be done for every
          (variant, numpe) pair. The variables $V, $P can be used elsewhere in
          the test script and will be filled in with variants and numpes at the
          time the test is run.
    4.2.2 The remaining entries are for description, parallel config file name,
          physics config file name, and output reference filename.
  4.3 A good example test script with all of the above functionality can be
      found in the water_32M_10Ry regression test.

5) Output reference:
  5.1 An output reference file is a stripped down version of the output from a
      single iteration. Examples can be found in the water_32M_10Ry regression
      test.
