1) Extra Installation:
  1.1 Download the lateset version of PyYAML from http://pyyaml.org/wiki/PyYAML
  1.2 Install PyYAML by using command 'python setup.py install'. If you want to
      use arbitrary install path instead of default one, please use command
      'python setup.py install --home=PATH' and then use command
      'export PYTHONPATH = PATH/lib/python'.

2) Test structure:
  2.1 Data set must contain a 'tests' directory. Inside of the 'tests' directory
      there should be a directory for each set of tests, ie: regression,
      multi-core, scaling.
  2.2 Each test directory needs 3 things: OpenAtom configuration files,
      output reference files, and a test script. The format of the output
      references and the test script will be described later.

3) Running the framework:
  3.1 From the python directory, run
      'python test_driver.py <exe_path> <config_file>'. This will run all tests
      specified in the config file using the specified build.
        3.1.1 Example test configs can be found in the python directory
  3.2 TODO: For now, datasets must be located in the data directory of the
      openatom base directory
  3.3 TODO: Allow the test config to specify just a data set, or a data set +
      test_dir + test_name for more flexibility with testing

4) Test Script:
  4.1 The header of the test script begins with '- config:'. Under this config
      header is where the top level settings for all tests described by this
      file go. Any of these setting can be overridden in the entries for
      specific tests.
    4.1.1 TODO: Right now sig_figs, and iteration can only go here, and will
          be ignored if they are part of specific tests.
  4.2 After the header, there will be an entry for each test, beginning with
      '- name: <test_name>'. On the following lines, test specifics will be
      described. These include 'variants', 'numpe', 'desc', 'par_cfg',
      'phy_cfg', and 'out_ref'.
    4.2.1 Variants and numpe are lists of the form [x,y,z]. Each entry in the
          list specifies a specific run, and runs will be done for every
          (variant, numpe) pair. The variables $V, $P can be used elsewhere in
          the test script and will be filled in with variants and numpes at the
          time the test is run.
    4.2.2 The remaining entries are for description, parallel config file name,
          physics config file name, and output reference filename.
  4.3 A good example test script with all of the above functionality can be
      found in the water_32M_10Ry regression test.

5) Output reference:
  5.1 An output reference file is a stripped down version of the output from a
      single iteration. ie: water_32M_10Ry/tests/regression/cpout.log
  5.2 When each test runs, output from the test goes in the output directory for
      that specific test. ie: water_32M_10Ry/tests/regression/output
  5.3 The Python framework uses the test output to create a new file, with a
      stripped down version of the output to be compared to the reference output
    5.3.1 To update the reference output, this temp file can be copied to the
          ref output file.
